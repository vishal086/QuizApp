{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _inherits from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _createClass from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _slicedToArray from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toArray from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/toArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * @remix-run/router v1.20.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nvar PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$initialEntri = _options.initialEntries,\n    initialEntries = _options$initialEntri === void 0 ? [\"/\"] : _options$initialEntri,\n    initialIndex = _options.initialIndex,\n    _options$v5Compat = _options.v5Compat,\n    v5Compat = _options$v5Compat === void 0 ? false : _options$v5Compat;\n  var entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map(function (entry, index) {\n    return createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined);\n  });\n  var index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  var action = Action.Pop;\n  var listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    var location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  var history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref: createHref,\n    createURL: function createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation: function encodeLocation(to) {\n      var path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push: function push(to, state) {\n      action = Action.Push;\n      var nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace: function replace(to, state) {\n      action = Action.Replace;\n      var nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go: function go(delta) {\n      action = Action.Pop;\n      var nextIndex = clampIndex(index + delta);\n      var nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action: action,\n          location: nextLocation,\n          delta: delta\n        });\n      }\n    },\n    listen: function listen(fn) {\n      listener = fn;\n      return function () {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    var _window$location = window.location,\n      pathname = _window$location.pathname,\n      search = _window$location.search,\n      hash = _window$location.hash;\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    var _parsePath = parsePath(window.location.hash.substr(1)),\n      _parsePath$pathname = _parsePath.pathname,\n      pathname = _parsePath$pathname === void 0 ? \"/\" : _parsePath$pathname,\n      _parsePath$search = _parsePath.search,\n      search = _parsePath$search === void 0 ? \"\" : _parsePath$search,\n      _parsePath$hash = _parsePath.hash,\n      hash = _parsePath$hash === void 0 ? \"\" : _parsePath$hash;\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname: pathname,\n      search: search,\n      hash: hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    var base = window.document.querySelector(\"base\");\n    var href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      var url = window.location.href;\n      var hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  var location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state: state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  var _ref$pathname = _ref.pathname,\n    pathname = _ref$pathname === void 0 ? \"/\" : _ref$pathname,\n    _ref$search = _ref.search,\n    search = _ref$search === void 0 ? \"\" : _ref$search,\n    _ref$hash = _ref.hash,\n    hash = _ref$hash === void 0 ? \"\" : _ref$hash;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  var parsedPath = {};\n  if (path) {\n    var hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    var searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, _createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options2 = options,\n    _options2$window = _options2.window,\n    window = _options2$window === void 0 ? document.defaultView : _options2$window,\n    _options2$v5Compat = _options2.v5Compat,\n    v5Compat = _options2$v5Compat === void 0 ? false : _options2$v5Compat;\n  var globalHistory = window.history;\n  var action = Action.Pop;\n  var listener = null;\n  var index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    var state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    var nextIndex = getIndex();\n    var delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    var location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    var historyState = getHistoryState(location, index);\n    var url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action: action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    var base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    var href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  var history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen: function listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return function () {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref: function createHref(to) {\n      return _createHref(window, to);\n    },\n    createURL: createURL,\n    encodeLocation: function encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      var url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push: push,\n    replace: replace,\n    go: function go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nvar immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map(function (route, index) {\n    var treePath = [].concat(_toConsumableArray(parentPath), [String(index)]);\n    var id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      var indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      var pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id: id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  var location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  var pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  var branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  var matches = null;\n  for (var i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    var decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  var route = match.route,\n    pathname = match.pathname,\n    params = match.params;\n  return {\n    id: route.id,\n    pathname: pathname,\n    params: params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  var flattenRoute = function flattenRoute(route, index, relativePath) {\n    var meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route: route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    var path = joinPaths([parentPath, meta.relativePath]);\n    var routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path: path,\n      score: computeScore(path, route.index),\n      routesMeta: routesMeta\n    });\n  };\n  routes.forEach(function (route, index) {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      var _iterator = _createForOfIteratorHelper(explodeOptionalSegments(route.path)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var exploded = _step.value;\n          flattenRoute(route, index, exploded);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  var segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  var _segments = _toArray(segments),\n    first = _segments[0],\n    rest = _segments.slice(1);\n  // Optional path segments are denoted by a trailing `?`\n  var isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  var required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  var restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  var result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push.apply(result, _toConsumableArray(restExploded.map(function (subpath) {\n    return subpath === \"\" ? required : [required, subpath].join(\"/\");\n  })));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push.apply(result, _toConsumableArray(restExploded));\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(function (exploded) {\n    return path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded;\n  });\n}\nfunction rankRouteBranches(branches) {\n  branches.sort(function (a, b) {\n    return a.score !== b.score ? b.score - a.score // Higher score first\n    : compareIndexes(a.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }), b.routesMeta.map(function (meta) {\n      return meta.childrenIndex;\n    }));\n  });\n}\nvar paramRe = /^:[\\w-]+$/;\nvar dynamicSegmentValue = 3;\nvar indexRouteValue = 2;\nvar emptySegmentValue = 1;\nvar staticSegmentValue = 10;\nvar splatPenalty = -2;\nvar isSplat = function isSplat(s) {\n  return s === \"*\";\n};\nfunction computeScore(path, index) {\n  var segments = path.split(\"/\");\n  var initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(function (s) {\n    return !isSplat(s);\n  }).reduce(function (score, segment) {\n    return score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue);\n  }, initialScore);\n}\nfunction compareIndexes(a, b) {\n  var siblings = a.length === b.length && a.slice(0, -1).every(function (n, i) {\n    return n === b[i];\n  });\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  var routesMeta = branch.routesMeta;\n  var matchedParams = {};\n  var matchedPathname = \"/\";\n  var matches = [];\n  for (var i = 0; i < routesMeta.length; ++i) {\n    var meta = routesMeta[i];\n    var end = i === routesMeta.length - 1;\n    var remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    var match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end: end\n    }, remainingPathname);\n    var route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route: route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  var path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  var prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  var stringify = function stringify(p) {\n    return p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  };\n  var segments = path.split(/\\/+/).map(function (segment, index, array) {\n    var isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      var star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    var keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      var _keyMatch = _slicedToArray(keyMatch, 3),\n        key = _keyMatch[1],\n        optional = _keyMatch[2];\n      var param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(function (segment) {\n    return !!segment;\n  });\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  var _compilePath = compilePath(pattern.path, pattern.caseSensitive, pattern.end),\n    _compilePath2 = _slicedToArray(_compilePath, 2),\n    matcher = _compilePath2[0],\n    compiledParams = _compilePath2[1];\n  var match = pathname.match(matcher);\n  if (!match) return null;\n  var matchedPathname = match[0];\n  var pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  var captureGroups = match.slice(1);\n  var params = compiledParams.reduce(function (memo, _ref, index) {\n    var paramName = _ref.paramName,\n      isOptional = _ref.isOptional;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      var splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    var value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params: params,\n    pathname: matchedPathname,\n    pathnameBase: pathnameBase,\n    pattern: pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  var params = [];\n  var regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, function (_, paramName, isOptional) {\n    params.push({\n      paramName: paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  var matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(function (v) {\n      return decodeURIComponent(v).replace(/\\//g, \"%2F\");\n    }).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  var startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  var nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  var _ref5 = typeof to === \"string\" ? parsePath(to) : to,\n    toPathname = _ref5.pathname,\n    _ref5$search = _ref5.search,\n    search = _ref5$search === void 0 ? \"\" : _ref5$search,\n    _ref5$hash = _ref5.hash,\n    hash = _ref5$hash === void 0 ? \"\" : _ref5$hash;\n  var pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname: pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  var segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  var relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(function (segment) {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter(function (match, index) {\n    return index === 0 || match.route.path && match.route.path.length > 0;\n  });\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  var pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map(function (match, idx) {\n      return idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase;\n    });\n  }\n  return pathMatches.map(function (match) {\n    return match.pathnameBase;\n  });\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  var to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  var isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  var toPathname = isEmptyPath ? \"/\" : to.pathname;\n  var from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    var routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      var toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  var path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  var hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  var hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nvar joinPaths = function joinPaths(paths) {\n  return paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n};\n/**\n * @private\n */\nvar normalizePathname = function normalizePathname(pathname) {\n  return pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n};\n/**\n * @private\n */\nvar normalizeSearch = function normalizeSearch(search) {\n  return !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n};\n/**\n * @private\n */\nvar normalizeHash = function normalizeHash(hash) {\n  return !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n};\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nvar json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  var headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers: headers\n  }));\n};\nvar DataWithResponseInit = /*#__PURE__*/_createClass(function DataWithResponseInit(data, init) {\n  _classCallCheck(this, DataWithResponseInit);\n  this.type = \"DataWithResponseInit\";\n  this.data = data;\n  this.init = init || null;\n}); /**\n     * Create \"responses\" that contain `status`/`headers` without forcing\n     * serialization into an actual `Response` - used by Remix single fetch\n     */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nvar AbortedDeferredError = /*#__PURE__*/function (_Error) {\n  _inherits(AbortedDeferredError, _Error);\n  var _super = _createSuper(AbortedDeferredError);\n  function AbortedDeferredError() {\n    _classCallCheck(this, AbortedDeferredError);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(AbortedDeferredError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\nvar DeferredData = /*#__PURE__*/function () {\n  function DeferredData(data, responseInit) {\n    var _this = this;\n    _classCallCheck(this, DeferredData);\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    var reject;\n    this.abortPromise = new Promise(function (_, r) {\n      return reject = r;\n    });\n    this.controller = new AbortController();\n    var onAbort = function onAbort() {\n      return reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    };\n    this.unlistenAbortSignal = function () {\n      return _this.controller.signal.removeEventListener(\"abort\", onAbort);\n    };\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce(function (acc, _ref2) {\n      var _ref6 = _slicedToArray(_ref2, 2),\n        key = _ref6[0],\n        value = _ref6[1];\n      return Object.assign(acc, _defineProperty({}, key, _this.trackPromise(key, value)));\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  _createClass(DeferredData, [{\n    key: \"trackPromise\",\n    value: function trackPromise(key, value) {\n      var _this2 = this;\n      if (!(value instanceof Promise)) {\n        return value;\n      }\n      this.deferredKeys.push(key);\n      this.pendingKeysSet.add(key);\n      // We store a little wrapper promise that will be extended with\n      // _data/_error props upon resolve/reject\n      var promise = Promise.race([value, this.abortPromise]).then(function (data) {\n        return _this2.onSettle(promise, key, undefined, data);\n      }, function (error) {\n        return _this2.onSettle(promise, key, error);\n      });\n      // Register rejection listeners to avoid uncaught promise rejections on\n      // errors or aborted deferred values\n      promise.catch(function () {});\n      Object.defineProperty(promise, \"_tracked\", {\n        get: function get() {\n          return true;\n        }\n      });\n      return promise;\n    }\n  }, {\n    key: \"onSettle\",\n    value: function onSettle(promise, key, error, data) {\n      if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n        this.unlistenAbortSignal();\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        return Promise.reject(error);\n      }\n      this.pendingKeysSet.delete(key);\n      if (this.done) {\n        // Nothing left to abort!\n        this.unlistenAbortSignal();\n      }\n      // If the promise was resolved/rejected with undefined, we'll throw an error as you\n      // should always resolve with a value or null\n      if (error === undefined && data === undefined) {\n        var undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return undefinedError;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(undefinedError);\n      }\n      if (data === undefined) {\n        Object.defineProperty(promise, \"_error\", {\n          get: function get() {\n            return error;\n          }\n        });\n        this.emit(false, key);\n        return Promise.reject(error);\n      }\n      Object.defineProperty(promise, \"_data\", {\n        get: function get() {\n          return data;\n        }\n      });\n      this.emit(false, key);\n      return data;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(aborted, settledKey) {\n      this.subscribers.forEach(function (subscriber) {\n        return subscriber(aborted, settledKey);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var _this3 = this;\n      this.subscribers.add(fn);\n      return function () {\n        return _this3.subscribers.delete(fn);\n      };\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _this4 = this;\n      this.controller.abort();\n      this.pendingKeysSet.forEach(function (v, k) {\n        return _this4.pendingKeysSet.delete(k);\n      });\n      this.emit(true);\n    }\n  }, {\n    key: \"resolveData\",\n    value: function () {\n      var _resolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signal) {\n        var _this5 = this;\n        var aborted, onAbort;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                aborted = false;\n                if (this.done) {\n                  _context.next = 7;\n                  break;\n                }\n                onAbort = function onAbort() {\n                  return _this5.cancel();\n                };\n                signal.addEventListener(\"abort\", onAbort);\n                _context.next = 6;\n                return new Promise(function (resolve) {\n                  _this5.subscribe(function (aborted) {\n                    signal.removeEventListener(\"abort\", onAbort);\n                    if (aborted || _this5.done) {\n                      resolve(aborted);\n                    }\n                  });\n                });\n              case 6:\n                aborted = _context.sent;\n              case 7:\n                return _context.abrupt(\"return\", aborted);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function resolveData(_x) {\n        return _resolveData.apply(this, arguments);\n      }\n      return resolveData;\n    }()\n  }, {\n    key: \"done\",\n    get: function get() {\n      return this.pendingKeysSet.size === 0;\n    }\n  }, {\n    key: \"unwrappedData\",\n    get: function get() {\n      invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n      return Object.entries(this.data).reduce(function (acc, _ref3) {\n        var _ref7 = _slicedToArray(_ref3, 2),\n          key = _ref7[0],\n          value = _ref7[1];\n        return Object.assign(acc, _defineProperty({}, key, unwrapTrackedPromise(value)));\n      }, {});\n    }\n  }, {\n    key: \"pendingKeys\",\n    get: function get() {\n      return Array.from(this.pendingKeysSet);\n    }\n  }]);\n  return DeferredData;\n}();\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nvar defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  var responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  var responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  var headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers: headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar redirectDocument = function redirectDocument(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nvar replace = function replace(url, init) {\n  var response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nvar ErrorResponseImpl = /*#__PURE__*/_createClass(function ErrorResponseImpl(status, statusText, data, internal) {\n  _classCallCheck(this, ErrorResponseImpl);\n  if (internal === void 0) {\n    internal = false;\n  }\n  this.status = status;\n  this.statusText = statusText || \"\";\n  this.internal = internal;\n  if (data instanceof Error) {\n    this.data = data.toString();\n    this.error = data;\n  } else {\n    this.data = data;\n  }\n}); /**\n     * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n     * Response thrown from an action/loader\n     */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nvar validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nvar validMutationMethods = new Set(validMutationMethodsArr);\nvar validRequestMethodsArr = [\"get\"].concat(validMutationMethodsArr);\nvar validRequestMethods = new Set(validRequestMethodsArr);\nvar redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nvar redirectPreserveMethodStatusCodes = new Set([307, 308]);\nvar IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nvar IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nvar ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nvar defaultMapRouteProperties = function defaultMapRouteProperties(route) {\n  return {\n    hasErrorBoundary: Boolean(route.hasErrorBoundary)\n  };\n};\nvar TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  var routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  var isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  var isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  var mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  var manifest = {};\n  // Routes in tree format for matching\n  var dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  var inFlightDataRoutes;\n  var basename = init.basename || \"/\";\n  var dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  var patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  var future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  var unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  var subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  var savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  var getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  var getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  var initialScrollRestored = init.hydrationData != null;\n  var initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  var initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    var error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    var _getShortCircuitMatch = getShortCircuitMatches(dataRoutes),\n      matches = _getShortCircuitMatch.matches,\n      route = _getShortCircuitMatch.route;\n    initialMatches = matches;\n    initialErrors = _defineProperty({}, route.id, error);\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    var fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  var initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      var _fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (_fogOfWar.active && _fogOfWar.matches) {\n        initialMatches = _fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(function (m) {\n    return m.route.lazy;\n  })) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(function (m) {\n    return m.route.loader;\n  })) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    var loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    var errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      var idx = initialMatches.findIndex(function (m) {\n        return errors[m.route.id] !== undefined;\n      });\n      initialized = initialMatches.slice(0, idx + 1).every(function (m) {\n        return !shouldLoadRouteOnHydration(m.route, loaderData, errors);\n      });\n    } else {\n      initialized = initialMatches.every(function (m) {\n        return !shouldLoadRouteOnHydration(m.route, loaderData, errors);\n      });\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  var router;\n  var state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized: initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  var pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  var pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  var pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  var pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  var appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  var removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  var isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  var isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  var cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  var cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  var fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  var incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  var pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  var fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  var fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  var fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  var activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  var deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  var activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  var blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  var unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(function (_ref) {\n      var historyAction = _ref.action,\n        location = _ref.location,\n        delta = _ref.delta;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      var blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction: historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        var nextHistoryUpdatePromise = new Promise(function (resolve) {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location: location,\n          proceed: function proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location: location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(function () {\n              return init.history.go(delta);\n            });\n          },\n          reset: function reset() {\n            var blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers: blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      var _saveAppliedTransitions = function _saveAppliedTransitions() {\n        return persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      };\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = function removePageHideEventListener() {\n        return routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n      };\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach(function (_, key) {\n      return deleteFetcher(key);\n    });\n    state.blockers.forEach(function (_, key) {\n      return deleteBlocker(key);\n    });\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return function () {\n      return subscribers.delete(fn);\n    };\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    var completedFetchers = [];\n    var deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach(function (fetcher, key) {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    _toConsumableArray(subscribers).forEach(function (subscriber) {\n      return subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true\n      });\n    });\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(function (key) {\n        return state.fetchers.delete(key);\n      });\n      deletedFetchersKeys.forEach(function (key) {\n        return deleteFetcher(key);\n      });\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    var _ref8 = _temp === void 0 ? {} : _temp,\n      flushSync = _ref8.flushSync;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    var isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    var actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    var loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    var blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach(function (_, k) {\n        return blockers.set(k, IDLE_BLOCKER);\n      });\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    var preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    var viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      var priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      var toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData: actionData,\n      loaderData: loaderData,\n      historyAction: pendingAction,\n      location: location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: preventScrollReset,\n      blockers: blockers\n    }), {\n      viewTransitionOpts: viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  function navigate(_x2, _x3) {\n    return _navigate.apply(this, arguments);\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function _navigate() {\n    _navigate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(to, opts) {\n      var normalizedPath, _normalizeNavigateOpt2, path, submission, error, currentLocation, nextLocation, userReplace, historyAction, preventScrollReset, flushSync, blockerKey;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(typeof to === \"number\")) {\n                _context2.next = 3;\n                break;\n              }\n              init.history.go(to);\n              return _context2.abrupt(\"return\");\n            case 3:\n              normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n              _normalizeNavigateOpt2 = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts), path = _normalizeNavigateOpt2.path, submission = _normalizeNavigateOpt2.submission, error = _normalizeNavigateOpt2.error;\n              currentLocation = state.location;\n              nextLocation = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n              // URL from window.location, so we need to encode it here so the behavior\n              // remains the same as POP and non-data-router usages.  new URL() does all\n              // the same encoding we'd get from a history.pushState/window.location read\n              // without having to touch history\n              nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n              userReplace = opts && opts.replace != null ? opts.replace : undefined;\n              historyAction = Action.Push;\n              if (userReplace === true) {\n                historyAction = Action.Replace;\n              } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n                // By default on submissions to the current location we REPLACE so that\n                // users don't have to double-click the back button to get to the prior\n                // location.  If the user redirects to a different location from the\n                // action/loader this will be ignored and the redirect will be a PUSH\n                historyAction = Action.Replace;\n              }\n              preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n              flushSync = (opts && opts.flushSync) === true;\n              blockerKey = shouldBlockNavigation({\n                currentLocation: currentLocation,\n                nextLocation: nextLocation,\n                historyAction: historyAction\n              });\n              if (!blockerKey) {\n                _context2.next = 17;\n                break;\n              }\n              // Put the blocker into a blocked state\n              updateBlocker(blockerKey, {\n                state: \"blocked\",\n                location: nextLocation,\n                proceed: function proceed() {\n                  updateBlocker(blockerKey, {\n                    state: \"proceeding\",\n                    proceed: undefined,\n                    reset: undefined,\n                    location: nextLocation\n                  });\n                  // Send the same navigation through\n                  navigate(to, opts);\n                },\n                reset: function reset() {\n                  var blockers = new Map(state.blockers);\n                  blockers.set(blockerKey, IDLE_BLOCKER);\n                  updateState({\n                    blockers: blockers\n                  });\n                }\n              });\n              return _context2.abrupt(\"return\");\n            case 17:\n              _context2.next = 19;\n              return startNavigation(historyAction, nextLocation, {\n                submission: submission,\n                // Send through the formData serialization error if we have one so we can\n                // render at the right error boundary after we match routes\n                pendingError: error,\n                preventScrollReset: preventScrollReset,\n                replace: opts && opts.replace,\n                enableViewTransition: opts && opts.viewTransition,\n                flushSync: flushSync\n              });\n            case 19:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 20:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _navigate.apply(this, arguments);\n  }\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  function startNavigation(_x4, _x5, _x6) {\n    return _startNavigation.apply(this, arguments);\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  function _startNavigation() {\n    _startNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(historyAction, location, opts) {\n      var routesToUse, loadingNavigation, matches, flushSync, fogOfWar, _handleNavigational, _error, notFoundMatches, _route, request, pendingActionResult, actionResult, _actionResult$pending, routeId, result, _yield$handleLoaders, shortCircuited, updatedMatches, loaderData, errors;\n      return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              // Abort any in-progress navigations and start a new one. Unset any ongoing\n              // uninterrupted revalidations unless told otherwise, since we want this\n              // new navigation to update history normally\n              pendingNavigationController && pendingNavigationController.abort();\n              pendingNavigationController = null;\n              pendingAction = historyAction;\n              isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n              // Save the current scroll position every time we start a new navigation,\n              // and track whether we should reset scroll on completion\n              saveScrollPosition(state.location, state.matches);\n              pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n              pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              loadingNavigation = opts && opts.overrideNavigation;\n              matches = matchRoutes(routesToUse, location, basename);\n              flushSync = (opts && opts.flushSync) === true;\n              fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n              if (fogOfWar.active && fogOfWar.matches) {\n                matches = fogOfWar.matches;\n              }\n              // Short circuit with a 404 on the root error boundary if we match nothing\n              if (matches) {\n                _context3.next = 17;\n                break;\n              }\n              _handleNavigational = handleNavigational404(location.pathname), _error = _handleNavigational.error, notFoundMatches = _handleNavigational.notFoundMatches, _route = _handleNavigational.route;\n              completeNavigation(location, {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route.id, _error)\n              }, {\n                flushSync: flushSync\n              });\n              return _context3.abrupt(\"return\");\n            case 17:\n              if (!(state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod)))) {\n                _context3.next = 20;\n                break;\n              }\n              completeNavigation(location, {\n                matches: matches\n              }, {\n                flushSync: flushSync\n              });\n              return _context3.abrupt(\"return\");\n            case 20:\n              // Create a controller/Request for this navigation\n              pendingNavigationController = new AbortController();\n              request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n              if (!(opts && opts.pendingError)) {\n                _context3.next = 26;\n                break;\n              }\n              // If we have a pendingError, it means the user attempted a GET submission\n              // with binary FormData so assign here and skip to handleLoaders.  That\n              // way we handle calling loaders above the boundary etc.  It's not really\n              // different from an actionError in that sense.\n              pendingActionResult = [findNearestBoundary(matches).route.id, {\n                type: ResultType.error,\n                error: opts.pendingError\n              }];\n              _context3.next = 44;\n              break;\n            case 26:\n              if (!(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n                _context3.next = 44;\n                break;\n              }\n              _context3.next = 29;\n              return handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n                replace: opts.replace,\n                flushSync: flushSync\n              });\n            case 29:\n              actionResult = _context3.sent;\n              if (!actionResult.shortCircuited) {\n                _context3.next = 32;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 32:\n              if (!actionResult.pendingActionResult) {\n                _context3.next = 38;\n                break;\n              }\n              _actionResult$pending = _slicedToArray(actionResult.pendingActionResult, 2), routeId = _actionResult$pending[0], result = _actionResult$pending[1];\n              if (!(isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404)) {\n                _context3.next = 38;\n                break;\n              }\n              pendingNavigationController = null;\n              completeNavigation(location, {\n                matches: actionResult.matches,\n                loaderData: {},\n                errors: _defineProperty({}, routeId, result.error)\n              });\n              return _context3.abrupt(\"return\");\n            case 38:\n              matches = actionResult.matches || matches;\n              pendingActionResult = actionResult.pendingActionResult;\n              loadingNavigation = getLoadingNavigation(location, opts.submission);\n              flushSync = false;\n              // No need to do fog of war matching again on loader execution\n              fogOfWar.active = false;\n              // Create a GET request for the loaders\n              request = createClientSideRequest(init.history, request.url, request.signal);\n            case 44:\n              _context3.next = 46;\n              return handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n            case 46:\n              _yield$handleLoaders = _context3.sent;\n              shortCircuited = _yield$handleLoaders.shortCircuited;\n              updatedMatches = _yield$handleLoaders.matches;\n              loaderData = _yield$handleLoaders.loaderData;\n              errors = _yield$handleLoaders.errors;\n              if (!shortCircuited) {\n                _context3.next = 53;\n                break;\n              }\n              return _context3.abrupt(\"return\");\n            case 53:\n              // Clean up now that the action/loaders have completed.  Don't clean up if\n              // we short circuited because pendingNavigationController will have already\n              // been assigned to a new controller for the next navigation\n              pendingNavigationController = null;\n              completeNavigation(location, _extends({\n                matches: updatedMatches || matches\n              }, getActionDataForCommit(pendingActionResult), {\n                loaderData: loaderData,\n                errors: errors\n              }));\n            case 55:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _startNavigation.apply(this, arguments);\n  }\n  function handleAction(_x7, _x8, _x9, _x10, _x11, _x12) {\n    return _handleAction.apply(this, arguments);\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  function _handleAction() {\n    _handleAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(request, location, submission, matches, isFogOfWar, opts) {\n      var navigation, discoverResult, boundaryId, _handleNavigational2, notFoundMatches, _error2, _route2, result, actionMatch, results, _replace, _location, boundaryMatch;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (opts === void 0) {\n                opts = {};\n              }\n              interruptActiveLoads();\n              // Put us in a submitting state\n              navigation = getSubmittingNavigation(location, submission);\n              updateState({\n                navigation: navigation\n              }, {\n                flushSync: opts.flushSync === true\n              });\n              if (!isFogOfWar) {\n                _context4.next = 23;\n                break;\n              }\n              _context4.next = 7;\n              return discoverRoutes(matches, location.pathname, request.signal);\n            case 7:\n              discoverResult = _context4.sent;\n              if (!(discoverResult.type === \"aborted\")) {\n                _context4.next = 12;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 12:\n              if (!(discoverResult.type === \"error\")) {\n                _context4.next = 17;\n                break;\n              }\n              boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n              return _context4.abrupt(\"return\", {\n                matches: discoverResult.partialMatches,\n                pendingActionResult: [boundaryId, {\n                  type: ResultType.error,\n                  error: discoverResult.error\n                }]\n              });\n            case 17:\n              if (discoverResult.matches) {\n                _context4.next = 22;\n                break;\n              }\n              _handleNavigational2 = handleNavigational404(location.pathname), notFoundMatches = _handleNavigational2.notFoundMatches, _error2 = _handleNavigational2.error, _route2 = _handleNavigational2.route;\n              return _context4.abrupt(\"return\", {\n                matches: notFoundMatches,\n                pendingActionResult: [_route2.id, {\n                  type: ResultType.error,\n                  error: _error2\n                }]\n              });\n            case 22:\n              matches = discoverResult.matches;\n            case 23:\n              actionMatch = getTargetMatch(matches, location);\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context4.next = 28;\n                break;\n              }\n              result = {\n                type: ResultType.error,\n                error: getInternalRouterError(405, {\n                  method: request.method,\n                  pathname: location.pathname,\n                  routeId: actionMatch.route.id\n                })\n              };\n              _context4.next = 34;\n              break;\n            case 28:\n              _context4.next = 30;\n              return callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n            case 30:\n              results = _context4.sent;\n              result = results[actionMatch.route.id];\n              if (!request.signal.aborted) {\n                _context4.next = 34;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 34:\n              if (!isRedirectResult(result)) {\n                _context4.next = 39;\n                break;\n              }\n              if (opts && opts.replace != null) {\n                _replace = opts.replace;\n              } else {\n                // If the user didn't explicity indicate replace behavior, replace if\n                // we redirected to the exact same location we're currently at to avoid\n                // double back-buttons\n                _location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n                _replace = _location === state.location.pathname + state.location.search;\n              }\n              _context4.next = 38;\n              return startRedirectNavigation(request, result, true, {\n                submission: submission,\n                replace: _replace\n              });\n            case 38:\n              return _context4.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 39:\n              if (!isDeferredResult(result)) {\n                _context4.next = 41;\n                break;\n              }\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n            case 41:\n              if (!isErrorResult(result)) {\n                _context4.next = 45;\n                break;\n              }\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions to the current location are REPLACE\n              // navigations, but if the action threw an error that'll be rendered in\n              // an errorElement, we fall back to PUSH so that the user can use the\n              // back button to get back to the pre-submission form location to try\n              // again\n              if ((opts && opts.replace) !== true) {\n                pendingAction = Action.Push;\n              }\n              return _context4.abrupt(\"return\", {\n                matches: matches,\n                pendingActionResult: [boundaryMatch.route.id, result]\n              });\n            case 45:\n              return _context4.abrupt(\"return\", {\n                matches: matches,\n                pendingActionResult: [actionMatch.route.id, result]\n              });\n            case 46:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    return _handleAction.apply(this, arguments);\n  }\n  function handleLoaders(_x13, _x14, _x15, _x16, _x17, _x18, _x19, _x20, _x21, _x22, _x23) {\n    return _handleLoaders.apply(this, arguments);\n  }\n  function _handleLoaders() {\n    _handleLoaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n      var loadingNavigation, activeSubmission, shouldUpdateNavigationState, actionData, discoverResult, boundaryId, _handleNavigational3, _error3, notFoundMatches, _route3, routesToUse, _getMatchesToLoad, _getMatchesToLoad2, matchesToLoad, revalidatingFetchers, _updatedFetchers, updates, abortPendingFetchRevalidations, _yield$callLoadersAnd, loaderResults, fetcherResults, redirect, _processLoaderData, loaderData, errors, updatedFetchers, didAbortFetchLoads, shouldUpdateFetchers;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              // Figure out the right navigation we want to use for data loading\n              loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission); // If this was a redirect from an action we don't have a \"submission\" but\n              // we have it on the loading navigation so use that if available\n              activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation); // If this is an uninterrupted revalidation, we remain in our current idle\n              // state.  If not, we need to switch to our loading state and load data,\n              // preserving any new action data or existing action data (in the case of\n              // a revalidation interrupting an actionReload)\n              // If we have partialHydration enabled, then don't update the state for the\n              // initial data load since it's not a \"navigation\"\n              shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration); // When fog of war is enabled, we enter our `loading` state earlier so we\n              // can discover new routes during the `loading` state.  We skip this if\n              // we've already run actions since we would have done our matching already.\n              // If the children() function threw then, we want to proceed with the\n              // partial matches it discovered.\n              if (!isFogOfWar) {\n                _context5.next = 23;\n                break;\n              }\n              if (shouldUpdateNavigationState) {\n                actionData = getUpdatedActionData(pendingActionResult);\n                updateState(_extends({\n                  navigation: loadingNavigation\n                }, actionData !== undefined ? {\n                  actionData: actionData\n                } : {}), {\n                  flushSync: flushSync\n                });\n              }\n              _context5.next = 7;\n              return discoverRoutes(matches, location.pathname, request.signal);\n            case 7:\n              discoverResult = _context5.sent;\n              if (!(discoverResult.type === \"aborted\")) {\n                _context5.next = 12;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 12:\n              if (!(discoverResult.type === \"error\")) {\n                _context5.next = 17;\n                break;\n              }\n              boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n              return _context5.abrupt(\"return\", {\n                matches: discoverResult.partialMatches,\n                loaderData: {},\n                errors: _defineProperty({}, boundaryId, discoverResult.error)\n              });\n            case 17:\n              if (discoverResult.matches) {\n                _context5.next = 22;\n                break;\n              }\n              _handleNavigational3 = handleNavigational404(location.pathname), _error3 = _handleNavigational3.error, notFoundMatches = _handleNavigational3.notFoundMatches, _route3 = _handleNavigational3.route;\n              return _context5.abrupt(\"return\", {\n                matches: notFoundMatches,\n                loaderData: {},\n                errors: _defineProperty({}, _route3.id, _error3)\n              });\n            case 22:\n              matches = discoverResult.matches;\n            case 23:\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              _getMatchesToLoad = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult), _getMatchesToLoad2 = _slicedToArray(_getMatchesToLoad, 2), matchesToLoad = _getMatchesToLoad2[0], revalidatingFetchers = _getMatchesToLoad2[1]; // Cancel pending deferreds for no-longer-matched routes or routes we're\n              // about to reload.  Note that if this is an action reload we would have\n              // already cancelled all pending deferreds so this would be a no-op\n              cancelActiveDeferreds(function (routeId) {\n                return !(matches && matches.some(function (m) {\n                  return m.route.id === routeId;\n                })) || matchesToLoad && matchesToLoad.some(function (m) {\n                  return m.route.id === routeId;\n                });\n              });\n              pendingNavigationLoadId = ++incrementingLoadId;\n              // Short circuit if we have no loaders to run\n              if (!(matchesToLoad.length === 0 && revalidatingFetchers.length === 0)) {\n                _context5.next = 31;\n                break;\n              }\n              _updatedFetchers = markFetchRedirectsDone();\n              completeNavigation(location, _extends({\n                matches: matches,\n                loaderData: {},\n                // Commit pending error if we're short circuiting\n                errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null\n              }, getActionDataForCommit(pendingActionResult), _updatedFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}), {\n                flushSync: flushSync\n              });\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 31:\n              if (shouldUpdateNavigationState) {\n                updates = {};\n                if (!isFogOfWar) {\n                  // Only update navigation/actionNData if we didn't already do it above\n                  updates.navigation = loadingNavigation;\n                  actionData = getUpdatedActionData(pendingActionResult);\n                  if (actionData !== undefined) {\n                    updates.actionData = actionData;\n                  }\n                }\n                if (revalidatingFetchers.length > 0) {\n                  updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n                }\n                updateState(updates, {\n                  flushSync: flushSync\n                });\n              }\n              revalidatingFetchers.forEach(function (rf) {\n                abortFetcher(rf.key);\n                if (rf.controller) {\n                  // Fetchers use an independent AbortController so that aborting a fetcher\n                  // (via deleteFetcher) does not abort the triggering navigation that\n                  // triggered the revalidation\n                  fetchControllers.set(rf.key, rf.controller);\n                }\n              });\n              // Proxy navigation abort through to revalidation fetchers\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (f) {\n                  return abortFetcher(f.key);\n                });\n              };\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n              _context5.next = 37;\n              return callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n            case 37:\n              _yield$callLoadersAnd = _context5.sent;\n              loaderResults = _yield$callLoadersAnd.loaderResults;\n              fetcherResults = _yield$callLoadersAnd.fetcherResults;\n              if (!request.signal.aborted) {\n                _context5.next = 42;\n                break;\n              }\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 42:\n              // Clean up _after_ loaders have completed.  Don't clean up if we short\n              // circuited because fetchControllers would have been aborted and\n              // reassigned to new controllers for the next navigation\n              if (pendingNavigationController) {\n                pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              }\n              revalidatingFetchers.forEach(function (rf) {\n                return fetchControllers.delete(rf.key);\n              });\n              // If any loaders returned a redirect Response, start a new REPLACE navigation\n              redirect = findRedirect(loaderResults);\n              if (!redirect) {\n                _context5.next = 49;\n                break;\n              }\n              _context5.next = 48;\n              return startRedirectNavigation(request, redirect.result, true, {\n                replace: replace\n              });\n            case 48:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 49:\n              redirect = findRedirect(fetcherResults);\n              if (!redirect) {\n                _context5.next = 55;\n                break;\n              }\n              // If this redirect came from a fetcher make sure we mark it in\n              // fetchRedirectIds so it doesn't get revalidated on the next set of\n              // loader executions\n              fetchRedirectIds.add(redirect.key);\n              _context5.next = 54;\n              return startRedirectNavigation(request, redirect.result, true, {\n                replace: replace\n              });\n            case 54:\n              return _context5.abrupt(\"return\", {\n                shortCircuited: true\n              });\n            case 55:\n              // Process and commit output from loaders\n              _processLoaderData = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData.loaderData, errors = _processLoaderData.errors; // Wire up subscribers to update loaderData as promises settle\n              activeDeferreds.forEach(function (deferredData, routeId) {\n                deferredData.subscribe(function (aborted) {\n                  // Note: No need to updateState here since the TrackedPromise on\n                  // loaderData is stable across resolve/reject\n                  // Remove this instance if we were aborted or if promises have settled\n                  if (aborted || deferredData.done) {\n                    activeDeferreds.delete(routeId);\n                  }\n                });\n              });\n              // Preserve SSR errors during partial hydration\n              if (future.v7_partialHydration && initialHydration && state.errors) {\n                errors = _extends({}, state.errors, errors);\n              }\n              updatedFetchers = markFetchRedirectsDone();\n              didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n              shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n              return _context5.abrupt(\"return\", _extends({\n                matches: matches,\n                loaderData: loaderData,\n                errors: errors\n              }, shouldUpdateFetchers ? {\n                fetchers: new Map(state.fetchers)\n              } : {}));\n            case 62:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n    return _handleLoaders.apply(this, arguments);\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data);\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(function (rf) {\n      var fetcher = state.fetchers.get(rf.key);\n      var revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    var flushSync = (opts && opts.flushSync) === true;\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    var matches = matchRoutes(routesToUse, normalizedPath, basename);\n    var fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var _normalizeNavigateOpt = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts),\n      path = _normalizeNavigateOpt.path,\n      submission = _normalizeNavigateOpt.submission,\n      error = _normalizeNavigateOpt.error;\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync: flushSync\n      });\n      return;\n    }\n    var match = getTargetMatch(matches, path);\n    var preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId: routeId,\n      path: path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  function handleFetcherAction(_x24, _x25, _x26, _x27, _x28, _x29, _x30, _x31, _x32) {\n    return _handleFetcherAction.apply(this, arguments);\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  function _handleFetcherAction() {\n    _handleFetcherAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n      var detectAndHandle405Error, existingFetcher, abortController, fetchRequest, discoverResult, originatingLoadId, actionResults, actionResult, nextLocation, revalidationRequest, routesToUse, matches, loadId, loadFetcher, _getMatchesToLoad3, _getMatchesToLoad4, matchesToLoad, revalidatingFetchers, abortPendingFetchRevalidations, _yield$callLoadersAnd2, loaderResults, fetcherResults, redirect, _processLoaderData2, loaderData, errors, doneFetcher;\n      return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              detectAndHandle405Error = function _detectAndHandle405Er(m) {\n                if (!m.route.action && !m.route.lazy) {\n                  var _error4 = getInternalRouterError(405, {\n                    method: submission.formMethod,\n                    pathname: path,\n                    routeId: routeId\n                  });\n                  setFetcherError(key, routeId, _error4, {\n                    flushSync: flushSync\n                  });\n                  return true;\n                }\n                return false;\n              };\n              interruptActiveLoads();\n              fetchLoadMatches.delete(key);\n              if (!(!isFogOfWar && detectAndHandle405Error(match))) {\n                _context6.next = 5;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 5:\n              // Put this fetcher into it's submitting state\n              existingFetcher = state.fetchers.get(key);\n              updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n                flushSync: flushSync\n              });\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n              if (!isFogOfWar) {\n                _context6.next = 31;\n                break;\n              }\n              _context6.next = 12;\n              return discoverRoutes(requestMatches, path, fetchRequest.signal);\n            case 12:\n              discoverResult = _context6.sent;\n              if (!(discoverResult.type === \"aborted\")) {\n                _context6.next = 17;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 17:\n              if (!(discoverResult.type === \"error\")) {\n                _context6.next = 22;\n                break;\n              }\n              setFetcherError(key, routeId, discoverResult.error, {\n                flushSync: flushSync\n              });\n              return _context6.abrupt(\"return\");\n            case 22:\n              if (discoverResult.matches) {\n                _context6.next = 27;\n                break;\n              }\n              setFetcherError(key, routeId, getInternalRouterError(404, {\n                pathname: path\n              }), {\n                flushSync: flushSync\n              });\n              return _context6.abrupt(\"return\");\n            case 27:\n              requestMatches = discoverResult.matches;\n              match = getTargetMatch(requestMatches, path);\n              if (!detectAndHandle405Error(match)) {\n                _context6.next = 31;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 31:\n              // Call the action for the fetcher\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context6.next = 35;\n              return callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n            case 35:\n              actionResults = _context6.sent;\n              actionResult = actionResults[match.route.id];\n              if (!fetchRequest.signal.aborted) {\n                _context6.next = 40;\n                break;\n              }\n              // We can delete this so long as we weren't aborted by our own fetcher\n              // re-submit which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n              return _context6.abrupt(\"return\");\n            case 40:\n              if (!(future.v7_fetcherPersist && deletedFetchers.has(key))) {\n                _context6.next = 46;\n                break;\n              }\n              if (!(isRedirectResult(actionResult) || isErrorResult(actionResult))) {\n                _context6.next = 44;\n                break;\n              }\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context6.abrupt(\"return\");\n            case 44:\n              _context6.next = 59;\n              break;\n            case 46:\n              if (!isRedirectResult(actionResult)) {\n                _context6.next = 56;\n                break;\n              }\n              fetchControllers.delete(key);\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context6.next = 53;\n                break;\n              }\n              // A new navigation was kicked off after our action started, so that\n              // should take precedence over this redirect navigation.  We already\n              // set isRevalidationRequired so all loaders for the new route should\n              // fire unless opted out via shouldRevalidate\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context6.abrupt(\"return\");\n            case 53:\n              fetchRedirectIds.add(key);\n              updateFetcherState(key, getLoadingFetcher(submission));\n              return _context6.abrupt(\"return\", startRedirectNavigation(fetchRequest, actionResult, false, {\n                fetcherSubmission: submission,\n                preventScrollReset: preventScrollReset\n              }));\n            case 56:\n              if (!isErrorResult(actionResult)) {\n                _context6.next = 59;\n                break;\n              }\n              setFetcherError(key, routeId, actionResult.error);\n              return _context6.abrupt(\"return\");\n            case 59:\n              if (!isDeferredResult(actionResult)) {\n                _context6.next = 61;\n                break;\n              }\n              throw getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n            case 61:\n              // Start the data load for current matches, or the next location if we're\n              // in the middle of a navigation\n              nextLocation = state.navigation.location || state.location;\n              revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n              routesToUse = inFlightDataRoutes || dataRoutes;\n              matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n              invariant(matches, \"Didn't find any matches after fetcher action\");\n              loadId = ++incrementingLoadId;\n              fetchReloadIds.set(key, loadId);\n              loadFetcher = getLoadingFetcher(submission, actionResult.data);\n              state.fetchers.set(key, loadFetcher);\n              _getMatchesToLoad3 = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]), _getMatchesToLoad4 = _slicedToArray(_getMatchesToLoad3, 2), matchesToLoad = _getMatchesToLoad4[0], revalidatingFetchers = _getMatchesToLoad4[1]; // Put all revalidating fetchers into the loading state, except for the\n              // current fetcher which we want to keep in it's current loading state which\n              // contains it's action submission info + action data\n              revalidatingFetchers.filter(function (rf) {\n                return rf.key !== key;\n              }).forEach(function (rf) {\n                var staleKey = rf.key;\n                var existingFetcher = state.fetchers.get(staleKey);\n                var revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n                state.fetchers.set(staleKey, revalidatingFetcher);\n                abortFetcher(staleKey);\n                if (rf.controller) {\n                  fetchControllers.set(staleKey, rf.controller);\n                }\n              });\n              updateState({\n                fetchers: new Map(state.fetchers)\n              });\n              abortPendingFetchRevalidations = function abortPendingFetchRevalidations() {\n                return revalidatingFetchers.forEach(function (rf) {\n                  return abortFetcher(rf.key);\n                });\n              };\n              abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n              _context6.next = 77;\n              return callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n            case 77:\n              _yield$callLoadersAnd2 = _context6.sent;\n              loaderResults = _yield$callLoadersAnd2.loaderResults;\n              fetcherResults = _yield$callLoadersAnd2.fetcherResults;\n              if (!abortController.signal.aborted) {\n                _context6.next = 82;\n                break;\n              }\n              return _context6.abrupt(\"return\");\n            case 82:\n              abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n              fetchReloadIds.delete(key);\n              fetchControllers.delete(key);\n              revalidatingFetchers.forEach(function (r) {\n                return fetchControllers.delete(r.key);\n              });\n              redirect = findRedirect(loaderResults);\n              if (!redirect) {\n                _context6.next = 89;\n                break;\n              }\n              return _context6.abrupt(\"return\", startRedirectNavigation(revalidationRequest, redirect.result, false, {\n                preventScrollReset: preventScrollReset\n              }));\n            case 89:\n              redirect = findRedirect(fetcherResults);\n              if (!redirect) {\n                _context6.next = 93;\n                break;\n              }\n              // If this redirect came from a fetcher make sure we mark it in\n              // fetchRedirectIds so it doesn't get revalidated on the next set of\n              // loader executions\n              fetchRedirectIds.add(redirect.key);\n              return _context6.abrupt(\"return\", startRedirectNavigation(revalidationRequest, redirect.result, false, {\n                preventScrollReset: preventScrollReset\n              }));\n            case 93:\n              // Process and commit output from loaders\n              _processLoaderData2 = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds), loaderData = _processLoaderData2.loaderData, errors = _processLoaderData2.errors; // Since we let revalidations complete even if the submitting fetcher was\n              // deleted, only put it back to idle if it hasn't been deleted\n              if (state.fetchers.has(key)) {\n                doneFetcher = getDoneFetcher(actionResult.data);\n                state.fetchers.set(key, doneFetcher);\n              }\n              abortStaleFetchLoads(loadId);\n              // If we are currently in a navigation loading state and this fetcher is\n              // more recent than the navigation, we want the newer data so abort the\n              // navigation and complete it with the fetcher data\n              if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n                invariant(pendingAction, \"Expected pending action\");\n                pendingNavigationController && pendingNavigationController.abort();\n                completeNavigation(state.navigation.location, {\n                  matches: matches,\n                  loaderData: loaderData,\n                  errors: errors,\n                  fetchers: new Map(state.fetchers)\n                });\n              } else {\n                // otherwise just update with the fetcher data, preserving any existing\n                // loaderData for loaders that did not need to reload.  We have to\n                // manually merge here since we aren't going through completeNavigation\n                updateState({\n                  errors: errors,\n                  loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n                  fetchers: new Map(state.fetchers)\n                });\n                isRevalidationRequired = false;\n              }\n            case 97:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n    return _handleFetcherAction.apply(this, arguments);\n  }\n  function handleFetcherLoader(_x33, _x34, _x35, _x36, _x37, _x38, _x39, _x40, _x41) {\n    return _handleFetcherLoader.apply(this, arguments);\n  } /**\n     * Utility function to handle redirects returned from an action or loader.\n     * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n     * example:\n     *\n     *  - user is on /a\n     *  - user clicks a link to /b\n     *  - loader for /b redirects to /c\n     *\n     * In a non-JS app the browser would track the in-flight navigation to /b and\n     * then replace it with /c when it encountered the redirect response.  In\n     * the end it would only ever update the URL bar with /c.\n     *\n     * In client-side routing using pushState/replaceState, we aim to emulate\n     * this behavior and we also do not update history until the end of the\n     * navigation (including processed redirects).  This means that we never\n     * actually touch history until we've processed redirects, so we just use\n     * the history action from the original navigation (PUSH or REPLACE).\n     */\n  function _handleFetcherLoader() {\n    _handleFetcherLoader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n      var existingFetcher, abortController, fetchRequest, discoverResult, originatingLoadId, results, result;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              existingFetcher = state.fetchers.get(key);\n              updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n                flushSync: flushSync\n              });\n              abortController = new AbortController();\n              fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n              if (!isFogOfWar) {\n                _context7.next = 24;\n                break;\n              }\n              _context7.next = 7;\n              return discoverRoutes(matches, path, fetchRequest.signal);\n            case 7:\n              discoverResult = _context7.sent;\n              if (!(discoverResult.type === \"aborted\")) {\n                _context7.next = 12;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 12:\n              if (!(discoverResult.type === \"error\")) {\n                _context7.next = 17;\n                break;\n              }\n              setFetcherError(key, routeId, discoverResult.error, {\n                flushSync: flushSync\n              });\n              return _context7.abrupt(\"return\");\n            case 17:\n              if (discoverResult.matches) {\n                _context7.next = 22;\n                break;\n              }\n              setFetcherError(key, routeId, getInternalRouterError(404, {\n                pathname: path\n              }), {\n                flushSync: flushSync\n              });\n              return _context7.abrupt(\"return\");\n            case 22:\n              matches = discoverResult.matches;\n              match = getTargetMatch(matches, path);\n            case 24:\n              // Call the loader for this fetcher route match\n              fetchControllers.set(key, abortController);\n              originatingLoadId = incrementingLoadId;\n              _context7.next = 28;\n              return callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n            case 28:\n              results = _context7.sent;\n              result = results[match.route.id]; // Deferred isn't supported for fetcher loads, await everything and treat it\n              // as a normal load.  resolveDeferredData will return undefined if this\n              // fetcher gets aborted, so we just leave result untouched and short circuit\n              // below if that happens\n              if (!isDeferredResult(result)) {\n                _context7.next = 37;\n                break;\n              }\n              _context7.next = 33;\n              return resolveDeferredData(result, fetchRequest.signal, true);\n            case 33:\n              _context7.t0 = _context7.sent;\n              if (_context7.t0) {\n                _context7.next = 36;\n                break;\n              }\n              _context7.t0 = result;\n            case 36:\n              result = _context7.t0;\n            case 37:\n              // We can delete this so long as we weren't aborted by our our own fetcher\n              // re-load which would have put _new_ controller is in fetchControllers\n              if (fetchControllers.get(key) === abortController) {\n                fetchControllers.delete(key);\n              }\n              if (!fetchRequest.signal.aborted) {\n                _context7.next = 40;\n                break;\n              }\n              return _context7.abrupt(\"return\");\n            case 40:\n              if (!deletedFetchers.has(key)) {\n                _context7.next = 43;\n                break;\n              }\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context7.abrupt(\"return\");\n            case 43:\n              if (!isRedirectResult(result)) {\n                _context7.next = 53;\n                break;\n              }\n              if (!(pendingNavigationLoadId > originatingLoadId)) {\n                _context7.next = 49;\n                break;\n              }\n              // A new navigation was kicked off after our loader started, so that\n              // should take precedence over this redirect navigation\n              updateFetcherState(key, getDoneFetcher(undefined));\n              return _context7.abrupt(\"return\");\n            case 49:\n              fetchRedirectIds.add(key);\n              _context7.next = 52;\n              return startRedirectNavigation(fetchRequest, result, false, {\n                preventScrollReset: preventScrollReset\n              });\n            case 52:\n              return _context7.abrupt(\"return\");\n            case 53:\n              if (!isErrorResult(result)) {\n                _context7.next = 56;\n                break;\n              }\n              setFetcherError(key, routeId, result.error);\n              return _context7.abrupt(\"return\");\n            case 56:\n              invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n              // Put the fetcher back into an idle state\n              updateFetcherState(key, getDoneFetcher(result.data));\n            case 58:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }));\n    return _handleFetcherLoader.apply(this, arguments);\n  }\n  function startRedirectNavigation(_x42, _x43, _x44, _x45) {\n    return _startRedirectNavigation.apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  function _startRedirectNavigation() {\n    _startRedirectNavigation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(request, redirect, isNavigation, _temp2) {\n      var _ref11, submission, fetcherSubmission, preventScrollReset, replace, location, redirectLocation, isDocumentReload, url, redirectHistoryAction, _state$navigation, formMethod, formAction, formEncType, activeSubmission, overrideNavigation;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _ref11 = _temp2 === void 0 ? {} : _temp2, submission = _ref11.submission, fetcherSubmission = _ref11.fetcherSubmission, preventScrollReset = _ref11.preventScrollReset, replace = _ref11.replace;\n              if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n                isRevalidationRequired = true;\n              }\n              location = redirect.response.headers.get(\"Location\");\n              invariant(location, \"Expected a Location header on the redirect Response\");\n              location = normalizeRedirectLocation(location, new URL(request.url), basename);\n              redirectLocation = createLocation(state.location, location, {\n                _isRedirect: true\n              });\n              if (!isBrowser) {\n                _context8.next = 12;\n                break;\n              }\n              isDocumentReload = false;\n              if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n                // Hard reload if the response contained X-Remix-Reload-Document\n                isDocumentReload = true;\n              } else if (ABSOLUTE_URL_REGEX.test(location)) {\n                url = init.history.createURL(location);\n                isDocumentReload =\n                // Hard reload if it's an absolute URL to a new origin\n                url.origin !== routerWindow.location.origin ||\n                // Hard reload if it's an absolute URL that does not match our basename\n                stripBasename(url.pathname, basename) == null;\n              }\n              if (!isDocumentReload) {\n                _context8.next = 12;\n                break;\n              }\n              if (replace) {\n                routerWindow.location.replace(location);\n              } else {\n                routerWindow.location.assign(location);\n              }\n              return _context8.abrupt(\"return\");\n            case 12:\n              // There's no need to abort on redirects, since we don't detect the\n              // redirect until the action/loaders have settled\n              pendingNavigationController = null;\n              redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push; // Use the incoming submission if provided, fallback on the active one in\n              // state.navigation\n              _state$navigation = state.navigation, formMethod = _state$navigation.formMethod, formAction = _state$navigation.formAction, formEncType = _state$navigation.formEncType;\n              if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n                submission = getSubmissionFromNavigation(state.navigation);\n              }\n              // If this was a 307/308 submission we want to preserve the HTTP method and\n              // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n              // redirected location\n              activeSubmission = submission || fetcherSubmission;\n              if (!(redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod))) {\n                _context8.next = 22;\n                break;\n              }\n              _context8.next = 20;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                submission: _extends({}, activeSubmission, {\n                  formAction: location\n                }),\n                // Preserve these flags across redirects\n                preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n                enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n              });\n            case 20:\n              _context8.next = 25;\n              break;\n            case 22:\n              // If we have a navigation submission, we will preserve it through the\n              // redirect navigation\n              overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n              _context8.next = 25;\n              return startNavigation(redirectHistoryAction, redirectLocation, {\n                overrideNavigation: overrideNavigation,\n                // Send fetcher submissions through for shouldRevalidate\n                fetcherSubmission: fetcherSubmission,\n                // Preserve these flags across redirects\n                preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n                enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n              });\n            case 25:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }));\n    return _startRedirectNavigation.apply(this, arguments);\n  }\n  function callDataStrategy(_x46, _x47, _x48, _x49, _x50, _x51) {\n    return _callDataStrategy.apply(this, arguments);\n  }\n  function _callDataStrategy() {\n    _callDataStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(type, state, request, matchesToLoad, matches, fetcherKey) {\n      var results, dataResults, _i, _Object$entries, _Object$entries$_i, routeId, result, response;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              dataResults = {};\n              _context9.prev = 1;\n              _context9.next = 4;\n              return callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n            case 4:\n              results = _context9.sent;\n              _context9.next = 11;\n              break;\n            case 7:\n              _context9.prev = 7;\n              _context9.t0 = _context9[\"catch\"](1);\n              // If the outer dataStrategy method throws, just return the error for all\n              // matches - and it'll naturally bubble to the root\n              matchesToLoad.forEach(function (m) {\n                dataResults[m.route.id] = {\n                  type: ResultType.error,\n                  error: _context9.t0\n                };\n              });\n              return _context9.abrupt(\"return\", dataResults);\n            case 11:\n              _i = 0, _Object$entries = Object.entries(results);\n            case 12:\n              if (!(_i < _Object$entries.length)) {\n                _context9.next = 25;\n                break;\n              }\n              _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), routeId = _Object$entries$_i[0], result = _Object$entries$_i[1];\n              if (!isRedirectDataStrategyResultResult(result)) {\n                _context9.next = 19;\n                break;\n              }\n              response = result.result;\n              dataResults[routeId] = {\n                type: ResultType.redirect,\n                response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n              };\n              _context9.next = 22;\n              break;\n            case 19:\n              _context9.next = 21;\n              return convertDataStrategyResultToDataResult(result);\n            case 21:\n              dataResults[routeId] = _context9.sent;\n            case 22:\n              _i++;\n              _context9.next = 12;\n              break;\n            case 25:\n              return _context9.abrupt(\"return\", dataResults);\n            case 26:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[1, 7]]);\n    }));\n    return _callDataStrategy.apply(this, arguments);\n  }\n  function callLoadersAndMaybeResolveData(_x52, _x53, _x54, _x55, _x56) {\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function _callLoadersAndMaybeResolveData() {\n    _callLoadersAndMaybeResolveData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(state, matches, matchesToLoad, fetchersToLoad, request) {\n      var currentMatches, loaderResultsPromise, fetcherResultsPromise, loaderResults, fetcherResults;\n      return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              currentMatches = state.matches; // Kick off loaders and fetchers in parallel\n              loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n              fetcherResultsPromise = Promise.all(fetchersToLoad.map( /*#__PURE__*/function () {\n                var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(f) {\n                  var results, result;\n                  return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                    while (1) {\n                      switch (_context10.prev = _context10.next) {\n                        case 0:\n                          if (!(f.matches && f.match && f.controller)) {\n                            _context10.next = 8;\n                            break;\n                          }\n                          _context10.next = 3;\n                          return callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n                        case 3:\n                          results = _context10.sent;\n                          result = results[f.match.route.id]; // Fetcher results are keyed by fetcher key from here on out, not routeId\n                          return _context10.abrupt(\"return\", _defineProperty({}, f.key, result));\n                        case 8:\n                          return _context10.abrupt(\"return\", Promise.resolve(_defineProperty({}, f.key, {\n                            type: ResultType.error,\n                            error: getInternalRouterError(404, {\n                              pathname: f.path\n                            })\n                          })));\n                        case 9:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }\n                  }, _callee10);\n                }));\n                return function (_x60) {\n                  return _ref12.apply(this, arguments);\n                };\n              }()));\n              _context11.next = 5;\n              return loaderResultsPromise;\n            case 5:\n              loaderResults = _context11.sent;\n              _context11.next = 8;\n              return fetcherResultsPromise;\n            case 8:\n              fetcherResults = _context11.sent.reduce(function (acc, r) {\n                return Object.assign(acc, r);\n              }, {});\n              _context11.next = 11;\n              return Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n            case 11:\n              return _context11.abrupt(\"return\", {\n                loaderResults: loaderResults,\n                fetcherResults: fetcherResults\n              });\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }));\n    return _callLoadersAndMaybeResolveData.apply(this, arguments);\n  }\n  function interruptActiveLoads() {\n    var _cancelledDeferredRou;\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    (_cancelledDeferredRou = cancelledDeferredRoutes).push.apply(_cancelledDeferredRou, _toConsumableArray(cancelActiveDeferreds()));\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach(function (_, key) {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    var boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: _defineProperty({}, boundaryMatch.route.id, error),\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    var fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      var count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    var controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    var _iterator2 = _createForOfIteratorHelper(keys),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var key = _step2.value;\n        var fetcher = getFetcher(key);\n        var doneFetcher = getDoneFetcher(fetcher.data);\n        state.fetchers.set(key, doneFetcher);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  function markFetchRedirectsDone() {\n    var doneKeys = [];\n    var updatedFetchers = false;\n    var _iterator3 = _createForOfIteratorHelper(fetchRedirectIds),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        var fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          fetchRedirectIds.delete(key);\n          doneKeys.push(key);\n          updatedFetchers = true;\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    var yeetedKeys = [];\n    var _iterator4 = _createForOfIteratorHelper(fetchReloadIds),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _step4$value = _slicedToArray(_step4.value, 2),\n          key = _step4$value[0],\n          id = _step4$value[1];\n        if (id < landedId) {\n          var fetcher = state.fetchers.get(key);\n          invariant(fetcher, \"Expected fetcher: \" + key);\n          if (fetcher.state === \"loading\") {\n            abortFetcher(key);\n            fetchReloadIds.delete(key);\n            yeetedKeys.push(key);\n          }\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    var blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    var blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers: blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    var currentLocation = _ref2.currentLocation,\n      nextLocation = _ref2.nextLocation,\n      historyAction = _ref2.historyAction;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    var entries = Array.from(blockerFunctions.entries());\n    var _entries = _slicedToArray(entries[entries.length - 1], 2),\n      blockerKey = _entries[0],\n      blockerFunction = _entries[1];\n    var blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation: currentLocation,\n      nextLocation: nextLocation,\n      historyAction: historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    var error = getInternalRouterError(404, {\n      pathname: pathname\n    });\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    var _getShortCircuitMatch2 = getShortCircuitMatches(routesToUse),\n      matches = _getShortCircuitMatch2.matches,\n      route = _getShortCircuitMatch2.route;\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route: route,\n      error: error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    var cancelledRouteIds = [];\n    activeDeferreds.forEach(function (dfd, routeId) {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      var y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return function () {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      var key = getScrollRestorationKey(location, matches.map(function (m) {\n        return convertRouteMatchToUiMatch(m, state.loaderData);\n      }));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      var key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      var key = getScrollKey(location, matches);\n      var y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        var fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          var partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  function discoverRoutes(_x57, _x58, _x59) {\n    return _discoverRoutes.apply(this, arguments);\n  }\n  function _discoverRoutes() {\n    _discoverRoutes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(matches, pathname, signal) {\n      var partialMatches, _loop, _ret;\n      return _regeneratorRuntime().wrap(function _callee12$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              if (patchRoutesOnNavigationImpl) {\n                _context13.next = 2;\n                break;\n              }\n              return _context13.abrupt(\"return\", {\n                type: \"success\",\n                matches: matches\n              });\n            case 2:\n              partialMatches = matches;\n              _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n                var isNonHMR, routesToUse, localManifest, newMatches, newPartialMatches;\n                return _regeneratorRuntime().wrap(function _loop$(_context12) {\n                  while (1) {\n                    switch (_context12.prev = _context12.next) {\n                      case 0:\n                        isNonHMR = inFlightDataRoutes == null;\n                        routesToUse = inFlightDataRoutes || dataRoutes;\n                        localManifest = manifest;\n                        _context12.prev = 3;\n                        _context12.next = 6;\n                        return patchRoutesOnNavigationImpl({\n                          path: pathname,\n                          matches: partialMatches,\n                          patch: function patch(routeId, children) {\n                            if (signal.aborted) return;\n                            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n                          }\n                        });\n                      case 6:\n                        _context12.next = 11;\n                        break;\n                      case 8:\n                        _context12.prev = 8;\n                        _context12.t0 = _context12[\"catch\"](3);\n                        return _context12.abrupt(\"return\", {\n                          v: {\n                            type: \"error\",\n                            error: _context12.t0,\n                            partialMatches: partialMatches\n                          }\n                        });\n                      case 11:\n                        _context12.prev = 11;\n                        // If we are not in the middle of an HMR revalidation and we changed the\n                        // routes, provide a new identity so when we `updateState` at the end of\n                        // this navigation/fetch `router.routes` will be a new identity and\n                        // trigger a re-run of memoized `router.routes` dependencies.\n                        // HMR will already update the identity and reflow when it lands\n                        // `inFlightDataRoutes` in `completeNavigation`\n                        if (isNonHMR && !signal.aborted) {\n                          dataRoutes = _toConsumableArray(dataRoutes);\n                        }\n                        return _context12.finish(11);\n                      case 14:\n                        if (!signal.aborted) {\n                          _context12.next = 16;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\", {\n                          v: {\n                            type: \"aborted\"\n                          }\n                        });\n                      case 16:\n                        newMatches = matchRoutes(routesToUse, pathname, basename);\n                        if (!newMatches) {\n                          _context12.next = 19;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\", {\n                          v: {\n                            type: \"success\",\n                            matches: newMatches\n                          }\n                        });\n                      case 19:\n                        newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true); // Avoid loops if the second pass results in the same partial matches\n                        if (!(!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every(function (m, i) {\n                          return m.route.id === newPartialMatches[i].route.id;\n                        }))) {\n                          _context12.next = 22;\n                          break;\n                        }\n                        return _context12.abrupt(\"return\", {\n                          v: {\n                            type: \"success\",\n                            matches: null\n                          }\n                        });\n                      case 22:\n                        partialMatches = newPartialMatches;\n                      case 23:\n                      case \"end\":\n                        return _context12.stop();\n                    }\n                  }\n                }, _loop, null, [[3, 8, 11, 14]]);\n              });\n            case 4:\n              if (!true) {\n                _context13.next = 11;\n                break;\n              }\n              return _context13.delegateYield(_loop(), \"t0\", 6);\n            case 6:\n              _ret = _context13.t0;\n              if (!(typeof _ret === \"object\")) {\n                _context13.next = 9;\n                break;\n              }\n              return _context13.abrupt(\"return\", _ret.v);\n            case 9:\n              _context13.next = 4;\n              break;\n            case 11:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee12);\n    }));\n    return _discoverRoutes.apply(this, arguments);\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    var isNonHMR = inFlightDataRoutes == null;\n    var routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = _toConsumableArray(dataRoutes);\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize: initialize,\n    subscribe: subscribe,\n    enableScrollRestoration: enableScrollRestoration,\n    navigate: navigate,\n    fetch: fetch,\n    revalidate: revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: function createHref(to) {\n      return init.history.createHref(to);\n    },\n    encodeLocation: function encodeLocation(to) {\n      return init.history.encodeLocation(to);\n    },\n    getFetcher: getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose: dispose,\n    getBlocker: getBlocker,\n    deleteBlocker: deleteBlocker,\n    patchRoutes: patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes: _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nvar UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  var manifest = {};\n  var basename = (opts ? opts.basename : null) || \"/\";\n  var mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    var detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = function mapRouteProperties(route) {\n      return {\n        hasErrorBoundary: detectErrorBoundary(route)\n      };\n    };\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  var future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  var dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  function query(_x61, _x62) {\n    return _query.apply(this, arguments);\n  } /**\n     * The queryRoute() method is intended for targeted route requests, either\n     * for fetch ?_data requests or resource route requests.  In this case, we\n     * are only ever calling a single action or loader, and we are returning the\n     * returned value directly.  In most cases, this will be a Response returned\n     * from the action/loader, but it may be a primitive or other value as well -\n     * and in such cases the calling context should handle that accordingly.\n     *\n     * We do respect the throw/return differentiation, so if an action/loader\n     * throws, then this method will throw the value.  This is important so we\n     * can do proper boundary identification in Remix where a thrown Response\n     * must go to the Catch Boundary but a returned Response is happy-path.\n     *\n     * One thing to note is that any Router-initiated Errors that make sense\n     * to associate with a status code will be thrown as an ErrorResponse\n     * instance which include the raw Error, such that the calling context can\n     * serialize the error as they see fit while including the proper response\n     * code.  Examples here are 404 and 405 errors that occur prior to reaching\n     * any user-defined loaders.\n     *\n     * - `opts.routeId` allows you to specify the specific route handler to call.\n     *   If not provided the handler will determine the proper route by matching\n     *   against `request.url`\n     * - `opts.requestContext` is an optional server context that will be passed\n     *    to actions/loaders in the `context` parameter\n     */\n  function _query() {\n    _query = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(request, _temp3) {\n      var _ref14, requestContext, skipLoaderErrorBubbling, dataStrategy, url, method, location, matches, error, _getShortCircuitMatch3, methodNotAllowedMatches, route, _error5, _getShortCircuitMatch4, notFoundMatches, _route4, result;\n      return _regeneratorRuntime().wrap(function _callee13$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _ref14 = _temp3 === void 0 ? {} : _temp3, requestContext = _ref14.requestContext, skipLoaderErrorBubbling = _ref14.skipLoaderErrorBubbling, dataStrategy = _ref14.dataStrategy;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n              if (!(!isValidMethod(method) && method !== \"HEAD\")) {\n                _context14.next = 11;\n                break;\n              }\n              error = getInternalRouterError(405, {\n                method: method\n              });\n              _getShortCircuitMatch3 = getShortCircuitMatches(dataRoutes), methodNotAllowedMatches = _getShortCircuitMatch3.matches, route = _getShortCircuitMatch3.route;\n              return _context14.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: methodNotAllowedMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, route.id, error),\n                statusCode: error.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n            case 11:\n              if (matches) {\n                _context14.next = 15;\n                break;\n              }\n              _error5 = getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n              _getShortCircuitMatch4 = getShortCircuitMatches(dataRoutes), notFoundMatches = _getShortCircuitMatch4.matches, _route4 = _getShortCircuitMatch4.route;\n              return _context14.abrupt(\"return\", {\n                basename: basename,\n                location: location,\n                matches: notFoundMatches,\n                loaderData: {},\n                actionData: null,\n                errors: _defineProperty({}, _route4.id, _error5),\n                statusCode: _error5.status,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n            case 15:\n              _context14.next = 17;\n              return queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n            case 17:\n              result = _context14.sent;\n              if (!isResponse(result)) {\n                _context14.next = 20;\n                break;\n              }\n              return _context14.abrupt(\"return\", result);\n            case 20:\n              return _context14.abrupt(\"return\", _extends({\n                location: location,\n                basename: basename\n              }, result));\n            case 21:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee13);\n    }));\n    return _query.apply(this, arguments);\n  }\n  function queryRoute(_x63, _x64) {\n    return _queryRoute.apply(this, arguments);\n  }\n  function _queryRoute() {\n    _queryRoute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(request, _temp4) {\n      var _ref15, routeId, requestContext, dataStrategy, url, method, location, matches, match, result, error, _result$activeDeferre, _data;\n      return _regeneratorRuntime().wrap(function _callee14$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              _ref15 = _temp4 === void 0 ? {} : _temp4, routeId = _ref15.routeId, requestContext = _ref15.requestContext, dataStrategy = _ref15.dataStrategy;\n              url = new URL(request.url);\n              method = request.method;\n              location = createLocation(\"\", createPath(url), null, \"default\");\n              matches = matchRoutes(dataRoutes, location, basename); // SSR supports HEAD requests while SPA doesn't\n              if (!(!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\")) {\n                _context15.next = 9;\n                break;\n              }\n              throw getInternalRouterError(405, {\n                method: method\n              });\n            case 9:\n              if (matches) {\n                _context15.next = 11;\n                break;\n              }\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n            case 11:\n              match = routeId ? matches.find(function (m) {\n                return m.route.id === routeId;\n              }) : getTargetMatch(matches, location);\n              if (!(routeId && !match)) {\n                _context15.next = 16;\n                break;\n              }\n              throw getInternalRouterError(403, {\n                pathname: location.pathname,\n                routeId: routeId\n              });\n            case 16:\n              if (match) {\n                _context15.next = 18;\n                break;\n              }\n              throw getInternalRouterError(404, {\n                pathname: location.pathname\n              });\n            case 18:\n              _context15.next = 20;\n              return queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n            case 20:\n              result = _context15.sent;\n              if (!isResponse(result)) {\n                _context15.next = 23;\n                break;\n              }\n              return _context15.abrupt(\"return\", result);\n            case 23:\n              error = result.errors ? Object.values(result.errors)[0] : undefined;\n              if (!(error !== undefined)) {\n                _context15.next = 26;\n                break;\n              }\n              throw error;\n            case 26:\n              if (!result.actionData) {\n                _context15.next = 28;\n                break;\n              }\n              return _context15.abrupt(\"return\", Object.values(result.actionData)[0]);\n            case 28:\n              if (!result.loaderData) {\n                _context15.next = 32;\n                break;\n              }\n              _data = Object.values(result.loaderData)[0];\n              if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n                _data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n              }\n              return _context15.abrupt(\"return\", _data);\n            case 32:\n              return _context15.abrupt(\"return\", undefined);\n            case 33:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee14);\n    }));\n    return _queryRoute.apply(this, arguments);\n  }\n  function queryImpl(_x65, _x66, _x67, _x68, _x69, _x70, _x71) {\n    return _queryImpl.apply(this, arguments);\n  }\n  function _queryImpl() {\n    _queryImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n      var _result, result;\n      return _regeneratorRuntime().wrap(function _callee15$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n              _context16.prev = 1;\n              if (!isMutationMethod(request.method.toLowerCase())) {\n                _context16.next = 7;\n                break;\n              }\n              _context16.next = 5;\n              return submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n            case 5:\n              _result = _context16.sent;\n              return _context16.abrupt(\"return\", _result);\n            case 7:\n              _context16.next = 9;\n              return loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n            case 9:\n              result = _context16.sent;\n              return _context16.abrupt(\"return\", isResponse(result) ? result : _extends({}, result, {\n                actionData: null,\n                actionHeaders: {}\n              }));\n            case 13:\n              _context16.prev = 13;\n              _context16.t0 = _context16[\"catch\"](1);\n              if (!(isDataStrategyResult(_context16.t0) && isResponse(_context16.t0.result))) {\n                _context16.next = 19;\n                break;\n              }\n              if (!(_context16.t0.type === ResultType.error)) {\n                _context16.next = 18;\n                break;\n              }\n              throw _context16.t0.result;\n            case 18:\n              return _context16.abrupt(\"return\", _context16.t0.result);\n            case 19:\n              if (!isRedirectResponse(_context16.t0)) {\n                _context16.next = 21;\n                break;\n              }\n              return _context16.abrupt(\"return\", _context16.t0);\n            case 21:\n              throw _context16.t0;\n            case 22:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee15, null, [[1, 13]]);\n    }));\n    return _queryImpl.apply(this, arguments);\n  }\n  function submit(_x72, _x73, _x74, _x75, _x76, _x77, _x78) {\n    return _submit.apply(this, arguments);\n  }\n  function _submit() {\n    _submit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n      var result, error, results, _error6, loaderRequest, boundaryMatch, _context17, context;\n      return _regeneratorRuntime().wrap(function _callee16$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (!(!actionMatch.route.action && !actionMatch.route.lazy)) {\n                _context18.next = 7;\n                break;\n              }\n              error = getInternalRouterError(405, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: actionMatch.route.id\n              });\n              if (!isRouteRequest) {\n                _context18.next = 4;\n                break;\n              }\n              throw error;\n            case 4:\n              result = {\n                type: ResultType.error,\n                error: error\n              };\n              _context18.next = 12;\n              break;\n            case 7:\n              _context18.next = 9;\n              return callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n            case 9:\n              results = _context18.sent;\n              result = results[actionMatch.route.id];\n              if (request.signal.aborted) {\n                throwStaticHandlerAbortedError(request, isRouteRequest, future);\n              }\n            case 12:\n              if (!isRedirectResult(result)) {\n                _context18.next = 14;\n                break;\n              }\n              throw new Response(null, {\n                status: result.response.status,\n                headers: {\n                  Location: result.response.headers.get(\"Location\")\n                }\n              });\n            case 14:\n              if (!isDeferredResult(result)) {\n                _context18.next = 19;\n                break;\n              }\n              _error6 = getInternalRouterError(400, {\n                type: \"defer-action\"\n              });\n              if (!isRouteRequest) {\n                _context18.next = 18;\n                break;\n              }\n              throw _error6;\n            case 18:\n              result = {\n                type: ResultType.error,\n                error: _error6\n              };\n            case 19:\n              if (!isRouteRequest) {\n                _context18.next = 23;\n                break;\n              }\n              if (!isErrorResult(result)) {\n                _context18.next = 22;\n                break;\n              }\n              throw result.error;\n            case 22:\n              return _context18.abrupt(\"return\", {\n                matches: [actionMatch],\n                loaderData: {},\n                actionData: _defineProperty({}, actionMatch.route.id, result.data),\n                errors: null,\n                // Note: statusCode + headers are unused here since queryRoute will\n                // return the raw Response or value\n                statusCode: 200,\n                loaderHeaders: {},\n                actionHeaders: {},\n                activeDeferreds: null\n              });\n            case 23:\n              // Create a GET request for the loaders\n              loaderRequest = new Request(request.url, {\n                headers: request.headers,\n                redirect: request.redirect,\n                signal: request.signal\n              });\n              if (!isErrorResult(result)) {\n                _context18.next = 30;\n                break;\n              }\n              // Store off the pending error - we use it to determine which loaders\n              // to call and will commit it when we complete the navigation\n              boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n              _context18.next = 28;\n              return loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n            case 28:\n              _context17 = _context18.sent;\n              return _context18.abrupt(\"return\", _extends({}, _context17, {\n                statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n                actionData: null,\n                actionHeaders: _extends({}, result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {})\n              }));\n            case 30:\n              _context18.next = 32;\n              return loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n            case 32:\n              context = _context18.sent;\n              return _context18.abrupt(\"return\", _extends({}, context, {\n                actionData: _defineProperty({}, actionMatch.route.id, result.data)\n              }, result.statusCode ? {\n                statusCode: result.statusCode\n              } : {}, {\n                actionHeaders: result.headers ? _defineProperty({}, actionMatch.route.id, result.headers) : {}\n              }));\n            case 34:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee16);\n    }));\n    return _submit.apply(this, arguments);\n  }\n  function loadRouteData(_x79, _x80, _x81, _x82, _x83, _x84, _x85) {\n    return _loadRouteData.apply(this, arguments);\n  } // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  function _loadRouteData() {\n    _loadRouteData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n      var isRouteRequest, requestMatches, matchesToLoad, results, activeDeferreds, context, executedLoaders;\n      return _regeneratorRuntime().wrap(function _callee17$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              isRouteRequest = routeMatch != null; // Short circuit if we have no loaders to run (queryRoute())\n              if (!(isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy))) {\n                _context19.next = 3;\n                break;\n              }\n              throw getInternalRouterError(400, {\n                method: request.method,\n                pathname: new URL(request.url).pathname,\n                routeId: routeMatch == null ? void 0 : routeMatch.route.id\n              });\n            case 3:\n              requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n              matchesToLoad = requestMatches.filter(function (m) {\n                return m.route.loader || m.route.lazy;\n              }); // Short circuit if we have no loaders to run (query())\n              if (!(matchesToLoad.length === 0)) {\n                _context19.next = 7;\n                break;\n              }\n              return _context19.abrupt(\"return\", {\n                matches: matches,\n                // Add a null for all matched routes for proper revalidation on the client\n                loaderData: matches.reduce(function (acc, m) {\n                  return Object.assign(acc, _defineProperty({}, m.route.id, null));\n                }, {}),\n                errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? _defineProperty({}, pendingActionResult[0], pendingActionResult[1].error) : null,\n                statusCode: 200,\n                loaderHeaders: {},\n                activeDeferreds: null\n              });\n            case 7:\n              _context19.next = 9;\n              return callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n            case 9:\n              results = _context19.sent;\n              if (request.signal.aborted) {\n                throwStaticHandlerAbortedError(request, isRouteRequest, future);\n              }\n              // Process and commit output from loaders\n              activeDeferreds = new Map();\n              context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling); // Add a null for any non-loader matches for proper revalidation on the client\n              executedLoaders = new Set(matchesToLoad.map(function (match) {\n                return match.route.id;\n              }));\n              matches.forEach(function (match) {\n                if (!executedLoaders.has(match.route.id)) {\n                  context.loaderData[match.route.id] = null;\n                }\n              });\n              return _context19.abrupt(\"return\", _extends({}, context, {\n                matches: matches,\n                activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n              }));\n            case 16:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee17);\n    }));\n    return _loadRouteData.apply(this, arguments);\n  }\n  function callDataStrategy(_x86, _x87, _x88, _x89, _x90, _x91, _x92) {\n    return _callDataStrategy2.apply(this, arguments);\n  }\n  function _callDataStrategy2() {\n    _callDataStrategy2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n      var results, dataResults;\n      return _regeneratorRuntime().wrap(function _callee19$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n            case 2:\n              results = _context21.sent;\n              dataResults = {};\n              _context21.next = 6;\n              return Promise.all(matches.map( /*#__PURE__*/function () {\n                var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(match) {\n                  var result, response;\n                  return _regeneratorRuntime().wrap(function _callee18$(_context20) {\n                    while (1) {\n                      switch (_context20.prev = _context20.next) {\n                        case 0:\n                          if (match.route.id in results) {\n                            _context20.next = 2;\n                            break;\n                          }\n                          return _context20.abrupt(\"return\");\n                        case 2:\n                          result = results[match.route.id];\n                          if (!isRedirectDataStrategyResultResult(result)) {\n                            _context20.next = 6;\n                            break;\n                          }\n                          response = result.result; // Throw redirects and let the server handle them with an HTTP redirect\n                          throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n                        case 6:\n                          if (!(isResponse(result.result) && isRouteRequest)) {\n                            _context20.next = 8;\n                            break;\n                          }\n                          throw result;\n                        case 8:\n                          _context20.next = 10;\n                          return convertDataStrategyResultToDataResult(result);\n                        case 10:\n                          dataResults[match.route.id] = _context20.sent;\n                        case 11:\n                        case \"end\":\n                          return _context20.stop();\n                      }\n                    }\n                  }, _callee18);\n                }));\n                return function (_x93) {\n                  return _ref19.apply(this, arguments);\n                };\n              }()));\n            case 6:\n              return _context21.abrupt(\"return\", dataResults);\n            case 7:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee19);\n    }));\n    return _callDataStrategy2.apply(this, arguments);\n  }\n  return {\n    dataRoutes: dataRoutes,\n    query: query,\n    queryRoute: queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  var newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: _defineProperty({}, context._deepestRenderedBoundaryId || routes[0].id, error)\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  var method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  var contextualMatches;\n  var activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    var _iterator5 = _createForOfIteratorHelper(matches),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var match = _step5.value;\n        contextualMatches.push(match);\n        if (match.route.id === fromRouteId) {\n          activeRouteMatch = match;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  var path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    var nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      var params = new URLSearchParams(path.search);\n      var indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(function (v) {\n        return v;\n      }).forEach(function (v) {\n        return params.append(\"index\", v);\n      });\n      var qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path: path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path: path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  var getInvalidBodyError = function getInvalidBodyError() {\n    return {\n      path: path,\n      error: getInternalRouterError(400, {\n        type: \"invalid-body\"\n      })\n    };\n  };\n  // Create a Submission on non-GET navigations\n  var rawFormMethod = opts.formMethod || \"get\";\n  var formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  var formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      var text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce(function (acc, _ref3) {\n        var _ref20 = _slicedToArray(_ref3, 2),\n          name = _ref20[0],\n          value = _ref20[1];\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path: path,\n        submission: {\n          formMethod: formMethod,\n          formAction: formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text: text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        var _json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path: path,\n          submission: {\n            formMethod: formMethod,\n            formAction: formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json: _json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  var searchParams;\n  var formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  var submission = {\n    formMethod: formMethod,\n    formAction: formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData: formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path: path,\n      submission: submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  var parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission: submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  var index = matches.findIndex(function (m) {\n    return m.route.id === boundaryId;\n  });\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  var actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  var currentUrl = history.createURL(state.location);\n  var nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  var boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  var actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  var shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  var navigationMatches = boundaryMatches.filter(function (match, index) {\n    var route = match.route;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(function (id) {\n      return id === match.route.id;\n    })) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    var currentRouteMatch = state.matches[index];\n    var nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl: currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl: nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult: actionResult,\n      actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  var revalidatingFetchers = [];\n  fetchLoadMatches.forEach(function (f, key) {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(function (m) {\n      return m.route.id === f.routeId;\n    }) || deletedFetchers.has(key)) {\n      return;\n    }\n    var fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    var fetcher = state.fetchers.get(key);\n    var fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    var shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl: currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl: nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult: actionResult,\n        actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key: key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  var hasData = loaderData != null && loaderData[route.id] !== undefined;\n  var hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  var isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  var isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  var currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    var routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch2;\n  var _childrenToPatch;\n  var childrenToPatch;\n  if (routeId) {\n    var route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  var uniqueChildren = children.filter(function (newRoute) {\n    return !childrenToPatch.some(function (existingRoute) {\n      return isSameRoute(newRoute, existingRoute);\n    });\n  });\n  var newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  (_childrenToPatch2 = childrenToPatch).push.apply(_childrenToPatch2, _toConsumableArray(newRoutes));\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every(function (aChild, i) {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(function (bChild) {\n      return isSameRoute(aChild, bChild);\n    });\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nfunction loadLazyRouteModule(_x94, _x95, _x96) {\n  return _loadLazyRouteModule.apply(this, arguments);\n} // Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction _loadLazyRouteModule() {\n  _loadLazyRouteModule = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(route, mapRouteProperties, manifest) {\n    var lazyRoute, routeToUpdate, routeUpdates, lazyRouteProperty, staticRouteValue, isPropertyStaticallyDefined;\n    return _regeneratorRuntime().wrap(function _callee20$(_context22) {\n      while (1) {\n        switch (_context22.prev = _context22.next) {\n          case 0:\n            if (route.lazy) {\n              _context22.next = 2;\n              break;\n            }\n            return _context22.abrupt(\"return\");\n          case 2:\n            _context22.next = 4;\n            return route.lazy();\n          case 4:\n            lazyRoute = _context22.sent;\n            if (route.lazy) {\n              _context22.next = 7;\n              break;\n            }\n            return _context22.abrupt(\"return\");\n          case 7:\n            routeToUpdate = manifest[route.id];\n            invariant(routeToUpdate, \"No route found in manifest\");\n            // Update the route in place.  This should be safe because there's no way\n            // we could yet be sitting on this route as we can't get there without\n            // resolving lazy() first.\n            //\n            // This is different than the HMR \"update\" use-case where we may actively be\n            // on the route being updated.  The main concern boils down to \"does this\n            // mutation affect any ongoing navigations or any current state.matches\n            // values?\".  If not, it should be safe to update in place.\n            routeUpdates = {};\n            for (lazyRouteProperty in lazyRoute) {\n              staticRouteValue = routeToUpdate[lazyRouteProperty];\n              isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n              // This property isn't static since it should always be updated based\n              // on the route updates\n              lazyRouteProperty !== \"hasErrorBoundary\";\n              warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n              if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n                routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n              }\n            }\n            // Mutate the route with the provided updates.  Do this first so we pass\n            // the updated version to mapRouteProperties\n            Object.assign(routeToUpdate, routeUpdates);\n            // Mutate the `hasErrorBoundary` property on the route based on the route\n            // updates and remove the `lazy` function so we don't resolve the lazy\n            // route again.\n            Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n              lazy: undefined\n            }));\n          case 13:\n          case \"end\":\n            return _context22.stop();\n        }\n      }\n    }, _callee20);\n  }));\n  return _loadLazyRouteModule.apply(this, arguments);\n}\nfunction defaultDataStrategy(_x97) {\n  return _defaultDataStrategy.apply(this, arguments);\n}\nfunction _defaultDataStrategy() {\n  _defaultDataStrategy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(_ref4) {\n    var matches, matchesToLoad, results;\n    return _regeneratorRuntime().wrap(function _callee21$(_context23) {\n      while (1) {\n        switch (_context23.prev = _context23.next) {\n          case 0:\n            matches = _ref4.matches;\n            matchesToLoad = matches.filter(function (m) {\n              return m.shouldLoad;\n            });\n            _context23.next = 4;\n            return Promise.all(matchesToLoad.map(function (m) {\n              return m.resolve();\n            }));\n          case 4:\n            results = _context23.sent;\n            return _context23.abrupt(\"return\", results.reduce(function (acc, result, i) {\n              return Object.assign(acc, _defineProperty({}, matchesToLoad[i].route.id, result));\n            }, {}));\n          case 6:\n          case \"end\":\n            return _context23.stop();\n        }\n      }\n    }, _callee21);\n  }));\n  return _defaultDataStrategy.apply(this, arguments);\n}\nfunction callDataStrategyImpl(_x98, _x99, _x100, _x101, _x102, _x103, _x104, _x105, _x106, _x107) {\n  return _callDataStrategyImpl.apply(this, arguments);\n} // Default logic for calling a loader/action is the user has no specified a dataStrategy\nfunction _callDataStrategyImpl() {\n  _callDataStrategyImpl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n    var loadRouteDefinitionsPromises, dsMatches, results;\n    return _regeneratorRuntime().wrap(function _callee23$(_context25) {\n      while (1) {\n        switch (_context25.prev = _context25.next) {\n          case 0:\n            loadRouteDefinitionsPromises = matches.map(function (m) {\n              return m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined;\n            });\n            dsMatches = matches.map(function (match, i) {\n              var loadRoutePromise = loadRouteDefinitionsPromises[i];\n              var shouldLoad = matchesToLoad.some(function (m) {\n                return m.route.id === match.route.id;\n              });\n              // `resolve` encapsulates route.lazy(), executing the loader/action,\n              // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n              // can pass a callback to take fine-grained control over the execution\n              // of the loader/action\n              var resolve = /*#__PURE__*/function () {\n                var _ref22 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(handlerOverride) {\n                  return _regeneratorRuntime().wrap(function _callee22$(_context24) {\n                    while (1) {\n                      switch (_context24.prev = _context24.next) {\n                        case 0:\n                          if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n                            shouldLoad = true;\n                          }\n                          return _context24.abrupt(\"return\", shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n                            type: ResultType.data,\n                            result: undefined\n                          }));\n                        case 2:\n                        case \"end\":\n                          return _context24.stop();\n                      }\n                    }\n                  }, _callee22);\n                }));\n                return function resolve(_x126) {\n                  return _ref22.apply(this, arguments);\n                };\n              }();\n              return _extends({}, match, {\n                shouldLoad: shouldLoad,\n                resolve: resolve\n              });\n            }); // Send all matches here to allow for a middleware-type implementation.\n            // handler will be a no-op for unneeded routes and we filter those results\n            // back out below.\n            _context25.next = 4;\n            return dataStrategyImpl({\n              matches: dsMatches,\n              request: request,\n              params: matches[0].params,\n              fetcherKey: fetcherKey,\n              context: requestContext\n            });\n          case 4:\n            results = _context25.sent;\n            _context25.prev = 5;\n            _context25.next = 8;\n            return Promise.all(loadRouteDefinitionsPromises);\n          case 8:\n            _context25.next = 12;\n            break;\n          case 10:\n            _context25.prev = 10;\n            _context25.t0 = _context25[\"catch\"](5);\n          case 12:\n            return _context25.abrupt(\"return\", results);\n          case 13:\n          case \"end\":\n            return _context25.stop();\n        }\n      }\n    }, _callee23, null, [[5, 10]]);\n  }));\n  return _callDataStrategyImpl.apply(this, arguments);\n}\nfunction callLoaderOrAction(_x108, _x109, _x110, _x111, _x112, _x113) {\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction _callLoaderOrAction() {\n  _callLoaderOrAction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n    var result, onReject, runHandler, handler, handlerError, _yield$Promise$all, _yield$Promise$all2, value, url, pathname, _url, _pathname;\n    return _regeneratorRuntime().wrap(function _callee25$(_context27) {\n      while (1) {\n        switch (_context27.prev = _context27.next) {\n          case 0:\n            runHandler = function runHandler(handler) {\n              // Setup a promise we can race against so that abort signals short circuit\n              var reject;\n              // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n              // satisfy the function return value\n              var abortPromise = new Promise(function (_, r) {\n                return reject = r;\n              });\n              onReject = function onReject() {\n                return reject();\n              };\n              request.signal.addEventListener(\"abort\", onReject);\n              var actualHandler = function actualHandler(ctx) {\n                if (typeof handler !== \"function\") {\n                  return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n                }\n                return handler.apply(void 0, [{\n                  request: request,\n                  params: match.params,\n                  context: staticContext\n                }].concat(_toConsumableArray(ctx !== undefined ? [ctx] : [])));\n              };\n              var handlerPromise = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n                var val;\n                return _regeneratorRuntime().wrap(function _callee24$(_context26) {\n                  while (1) {\n                    switch (_context26.prev = _context26.next) {\n                      case 0:\n                        _context26.prev = 0;\n                        _context26.next = 3;\n                        return handlerOverride ? handlerOverride(function (ctx) {\n                          return actualHandler(ctx);\n                        }) : actualHandler();\n                      case 3:\n                        val = _context26.sent;\n                        return _context26.abrupt(\"return\", {\n                          type: \"data\",\n                          result: val\n                        });\n                      case 7:\n                        _context26.prev = 7;\n                        _context26.t0 = _context26[\"catch\"](0);\n                        return _context26.abrupt(\"return\", {\n                          type: \"error\",\n                          result: _context26.t0\n                        });\n                      case 10:\n                      case \"end\":\n                        return _context26.stop();\n                    }\n                  }\n                }, _callee24, null, [[0, 7]]);\n              }))();\n              return Promise.race([handlerPromise, abortPromise]);\n            };\n            _context27.prev = 1;\n            handler = match.route[type]; // If we have a route.lazy promise, await that first\n            if (!loadRoutePromise) {\n              _context27.next = 33;\n              break;\n            }\n            if (!handler) {\n              _context27.next = 15;\n              break;\n            }\n            _context27.next = 7;\n            return Promise.all([\n            // If the handler throws, don't let it immediately bubble out,\n            // since we need to let the lazy() execution finish so we know if this\n            // route has a boundary that can handle the error\n            runHandler(handler).catch(function (e) {\n              handlerError = e;\n            }), loadRoutePromise]);\n          case 7:\n            _yield$Promise$all = _context27.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 1);\n            value = _yield$Promise$all2[0];\n            if (!(handlerError !== undefined)) {\n              _context27.next = 12;\n              break;\n            }\n            throw handlerError;\n          case 12:\n            result = value;\n            _context27.next = 31;\n            break;\n          case 15:\n            _context27.next = 17;\n            return loadRoutePromise;\n          case 17:\n            handler = match.route[type];\n            if (!handler) {\n              _context27.next = 24;\n              break;\n            }\n            _context27.next = 21;\n            return runHandler(handler);\n          case 21:\n            result = _context27.sent;\n            _context27.next = 31;\n            break;\n          case 24:\n            if (!(type === \"action\")) {\n              _context27.next = 30;\n              break;\n            }\n            url = new URL(request.url);\n            pathname = url.pathname + url.search;\n            throw getInternalRouterError(405, {\n              method: request.method,\n              pathname: pathname,\n              routeId: match.route.id\n            });\n          case 30:\n            return _context27.abrupt(\"return\", {\n              type: ResultType.data,\n              result: undefined\n            });\n          case 31:\n            _context27.next = 42;\n            break;\n          case 33:\n            if (handler) {\n              _context27.next = 39;\n              break;\n            }\n            _url = new URL(request.url);\n            _pathname = _url.pathname + _url.search;\n            throw getInternalRouterError(404, {\n              pathname: _pathname\n            });\n          case 39:\n            _context27.next = 41;\n            return runHandler(handler);\n          case 41:\n            result = _context27.sent;\n          case 42:\n            invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n            _context27.next = 48;\n            break;\n          case 45:\n            _context27.prev = 45;\n            _context27.t0 = _context27[\"catch\"](1);\n            return _context27.abrupt(\"return\", {\n              type: ResultType.error,\n              result: _context27.t0\n            });\n          case 48:\n            _context27.prev = 48;\n            if (onReject) {\n              request.signal.removeEventListener(\"abort\", onReject);\n            }\n            return _context27.finish(48);\n          case 51:\n            return _context27.abrupt(\"return\", result);\n          case 52:\n          case \"end\":\n            return _context27.stop();\n        }\n      }\n    }, _callee25, null, [[1, 45, 48, 51]]);\n  }));\n  return _callLoaderOrAction.apply(this, arguments);\n}\nfunction convertDataStrategyResultToDataResult(_x114) {\n  return _convertDataStrategyResultToDataResult.apply(this, arguments);\n} // Support relative routing in internal redirects\nfunction _convertDataStrategyResultToDataResult() {\n  _convertDataStrategyResultToDataResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee26(dataStrategyResult) {\n    var result, type, _data2, contentType, _result$init2, _result$init, _result$init3, _result$init4, _result$init5, _result$init6;\n    return _regeneratorRuntime().wrap(function _callee26$(_context28) {\n      while (1) {\n        switch (_context28.prev = _context28.next) {\n          case 0:\n            result = dataStrategyResult.result, type = dataStrategyResult.type;\n            if (!isResponse(result)) {\n              _context28.next = 25;\n              break;\n            }\n            _context28.prev = 2;\n            contentType = result.headers.get(\"Content-Type\"); // Check between word boundaries instead of startsWith() due to the last\n            // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n            if (!(contentType && /\\bapplication\\/json\\b/.test(contentType))) {\n              _context28.next = 14;\n              break;\n            }\n            if (!(result.body == null)) {\n              _context28.next = 9;\n              break;\n            }\n            _data2 = null;\n            _context28.next = 12;\n            break;\n          case 9:\n            _context28.next = 11;\n            return result.json();\n          case 11:\n            _data2 = _context28.sent;\n          case 12:\n            _context28.next = 17;\n            break;\n          case 14:\n            _context28.next = 16;\n            return result.text();\n          case 16:\n            _data2 = _context28.sent;\n          case 17:\n            _context28.next = 22;\n            break;\n          case 19:\n            _context28.prev = 19;\n            _context28.t0 = _context28[\"catch\"](2);\n            return _context28.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context28.t0\n            });\n          case 22:\n            if (!(type === ResultType.error)) {\n              _context28.next = 24;\n              break;\n            }\n            return _context28.abrupt(\"return\", {\n              type: ResultType.error,\n              error: new ErrorResponseImpl(result.status, result.statusText, _data2),\n              statusCode: result.status,\n              headers: result.headers\n            });\n          case 24:\n            return _context28.abrupt(\"return\", {\n              type: ResultType.data,\n              data: _data2,\n              statusCode: result.status,\n              headers: result.headers\n            });\n          case 25:\n            if (!(type === ResultType.error)) {\n              _context28.next = 31;\n              break;\n            }\n            if (!isDataWithResponseInit(result)) {\n              _context28.next = 30;\n              break;\n            }\n            if (!(result.data instanceof Error)) {\n              _context28.next = 29;\n              break;\n            }\n            return _context28.abrupt(\"return\", {\n              type: ResultType.error,\n              error: result.data,\n              statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n            });\n          case 29:\n            // Convert thrown data() to ErrorResponse instances\n            result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n          case 30:\n            return _context28.abrupt(\"return\", {\n              type: ResultType.error,\n              error: result,\n              statusCode: isRouteErrorResponse(result) ? result.status : undefined\n            });\n          case 31:\n            if (!isDeferredData(result)) {\n              _context28.next = 33;\n              break;\n            }\n            return _context28.abrupt(\"return\", {\n              type: ResultType.deferred,\n              deferredData: result,\n              statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n              headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n            });\n          case 33:\n            if (!isDataWithResponseInit(result)) {\n              _context28.next = 35;\n              break;\n            }\n            return _context28.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.data,\n              statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n              headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n            });\n          case 35:\n            return _context28.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result\n            });\n          case 36:\n          case \"end\":\n            return _context28.stop();\n        }\n      }\n    }, _callee26, null, [[2, 19]]);\n  }));\n  return _convertDataStrategyResultToDataResult.apply(this, arguments);\n}\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  var location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    var trimmedMatches = matches.slice(0, matches.findIndex(function (m) {\n      return m.route.id === routeId;\n    }) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    var normalizedLocation = location;\n    var url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    var isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  var url = history.createURL(stripHashFromPath(location)).toString();\n  var init = {\n    signal: signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    var formMethod = submission.formMethod,\n      formEncType = submission.formEncType;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  var searchParams = new URLSearchParams();\n  var _iterator6 = _createForOfIteratorHelper(formData.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = _slicedToArray(_step6.value, 2),\n        key = _step6$value[0],\n        value = _step6$value[1];\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n      searchParams.append(key, typeof value === \"string\" ? value : value.name);\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  var formData = new FormData();\n  var _iterator7 = _createForOfIteratorHelper(searchParams.entries()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        key = _step7$value[0],\n        value = _step7$value[1];\n      formData.append(key, value);\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  var loaderData = {};\n  var errors = null;\n  var statusCode;\n  var foundError = false;\n  var loaderHeaders = {};\n  var pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(function (match) {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    var id = match.route.id;\n    var result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      var error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        var boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = _defineProperty({}, pendingActionResult[0], pendingError);\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData: loaderData,\n    errors: errors,\n    statusCode: statusCode || 200,\n    loaderHeaders: loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  var _processRouteLoaderDa = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n    ),\n    loaderData = _processRouteLoaderDa.loaderData,\n    errors = _processRouteLoaderDa.errors;\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(function (rf) {\n    var key = rf.key,\n      match = rf.match,\n      controller = rf.controller;\n    var result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      var boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, _defineProperty({}, boundaryMatch.route.id, result.error));\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      var doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData: loaderData,\n    errors: errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  var mergedLoaderData = _extends({}, newLoaderData);\n  var _iterator8 = _createForOfIteratorHelper(matches),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var match = _step8.value;\n      var id = match.route.id;\n      if (newLoaderData.hasOwnProperty(id)) {\n        if (newLoaderData[id] !== undefined) {\n          mergedLoaderData[id] = newLoaderData[id];\n        }\n      } else if (loaderData[id] !== undefined && match.route.loader) {\n        // Preserve existing keys not included in newLoaderData and where a loader\n        // wasn't removed by HMR\n        mergedLoaderData[id] = loaderData[id];\n      }\n      if (errors && errors.hasOwnProperty(id)) {\n        // Don't keep any loader data below the boundary\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: _defineProperty({}, pendingActionResult[0], pendingActionResult[1].data)\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  var eligibleMatches = routeId ? matches.slice(0, matches.findIndex(function (m) {\n    return m.route.id === routeId;\n  }) + 1) : _toConsumableArray(matches);\n  return eligibleMatches.reverse().find(function (m) {\n    return m.route.hasErrorBoundary === true;\n  }) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  var route = routes.length === 1 ? routes[0] : routes.find(function (r) {\n    return r.index || !r.path || r.path === \"/\";\n  }) || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route: route\n    }],\n    route: route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  var _ref21 = _temp5 === void 0 ? {} : _temp5,\n    pathname = _ref21.pathname,\n    routeId = _ref21.routeId,\n    method = _ref21.method,\n    type = _ref21.type,\n    message = _ref21.message;\n  var statusText = \"Unknown Server Error\";\n  var errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  var entries = Object.entries(results);\n  for (var i = entries.length - 1; i >= 0; i--) {\n    var _entries$i = _slicedToArray(entries[i], 2),\n      key = _entries$i[0],\n      result = _entries$i[1];\n    if (isRedirectResult(result)) {\n      return {\n        key: key,\n        result: result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  var parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  var deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  var status = result.status;\n  var location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nfunction resolveNavigationDeferredResults(_x115, _x116, _x117, _x118, _x119) {\n  return _resolveNavigationDeferredResults.apply(this, arguments);\n}\nfunction _resolveNavigationDeferredResults() {\n  _resolveNavigationDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee27(matches, results, signal, currentMatches, currentLoaderData) {\n    var entries, _loop2, index, _ret2;\n    return _regeneratorRuntime().wrap(function _callee27$(_context30) {\n      while (1) {\n        switch (_context30.prev = _context30.next) {\n          case 0:\n            entries = Object.entries(results);\n            _loop2 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop2(index) {\n              var _entries$index, routeId, result, match, currentMatch, isRevalidatingLoader;\n              return _regeneratorRuntime().wrap(function _loop2$(_context29) {\n                while (1) {\n                  switch (_context29.prev = _context29.next) {\n                    case 0:\n                      _entries$index = _slicedToArray(entries[index], 2), routeId = _entries$index[0], result = _entries$index[1];\n                      match = matches.find(function (m) {\n                        return (m == null ? void 0 : m.route.id) === routeId;\n                      }); // If we don't have a match, then we can have a deferred result to do\n                      // anything with.  This is for revalidating fetchers where the route was\n                      // removed during HMR\n                      if (match) {\n                        _context29.next = 4;\n                        break;\n                      }\n                      return _context29.abrupt(\"return\", \"continue\");\n                    case 4:\n                      currentMatch = currentMatches.find(function (m) {\n                        return m.route.id === match.route.id;\n                      });\n                      isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n                      if (!(isDeferredResult(result) && isRevalidatingLoader)) {\n                        _context29.next = 9;\n                        break;\n                      }\n                      _context29.next = 9;\n                      return resolveDeferredData(result, signal, false).then(function (result) {\n                        if (result) {\n                          results[routeId] = result;\n                        }\n                      });\n                    case 9:\n                    case \"end\":\n                      return _context29.stop();\n                  }\n                }\n              }, _loop2);\n            });\n            index = 0;\n          case 3:\n            if (!(index < entries.length)) {\n              _context30.next = 11;\n              break;\n            }\n            return _context30.delegateYield(_loop2(index), \"t0\", 5);\n          case 5:\n            _ret2 = _context30.t0;\n            if (!(_ret2 === \"continue\")) {\n              _context30.next = 8;\n              break;\n            }\n            return _context30.abrupt(\"continue\", 8);\n          case 8:\n            index++;\n            _context30.next = 3;\n            break;\n          case 11:\n          case \"end\":\n            return _context30.stop();\n        }\n      }\n    }, _callee27);\n  }));\n  return _resolveNavigationDeferredResults.apply(this, arguments);\n}\nfunction resolveFetcherDeferredResults(_x120, _x121, _x122) {\n  return _resolveFetcherDeferredResults.apply(this, arguments);\n}\nfunction _resolveFetcherDeferredResults() {\n  _resolveFetcherDeferredResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee28(matches, results, revalidatingFetchers) {\n    var _loop3, index, _ret3;\n    return _regeneratorRuntime().wrap(function _callee28$(_context32) {\n      while (1) {\n        switch (_context32.prev = _context32.next) {\n          case 0:\n            _loop3 = /*#__PURE__*/_regeneratorRuntime().mark(function _loop3(index) {\n              var _revalidatingFetchers, key, routeId, controller, result, match;\n              return _regeneratorRuntime().wrap(function _loop3$(_context31) {\n                while (1) {\n                  switch (_context31.prev = _context31.next) {\n                    case 0:\n                      _revalidatingFetchers = revalidatingFetchers[index], key = _revalidatingFetchers.key, routeId = _revalidatingFetchers.routeId, controller = _revalidatingFetchers.controller;\n                      result = results[key];\n                      match = matches.find(function (m) {\n                        return (m == null ? void 0 : m.route.id) === routeId;\n                      }); // If we don't have a match, then we can have a deferred result to do\n                      // anything with.  This is for revalidating fetchers where the route was\n                      // removed during HMR\n                      if (match) {\n                        _context31.next = 5;\n                        break;\n                      }\n                      return _context31.abrupt(\"return\", \"continue\");\n                    case 5:\n                      if (!isDeferredResult(result)) {\n                        _context31.next = 9;\n                        break;\n                      }\n                      // Note: we do not have to touch activeDeferreds here since we race them\n                      // against the signal in resolveDeferredData and they'll get aborted\n                      // there if needed\n                      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n                      _context31.next = 9;\n                      return resolveDeferredData(result, controller.signal, true).then(function (result) {\n                        if (result) {\n                          results[key] = result;\n                        }\n                      });\n                    case 9:\n                    case \"end\":\n                      return _context31.stop();\n                  }\n                }\n              }, _loop3);\n            });\n            index = 0;\n          case 2:\n            if (!(index < revalidatingFetchers.length)) {\n              _context32.next = 10;\n              break;\n            }\n            return _context32.delegateYield(_loop3(index), \"t0\", 4);\n          case 4:\n            _ret3 = _context32.t0;\n            if (!(_ret3 === \"continue\")) {\n              _context32.next = 7;\n              break;\n            }\n            return _context32.abrupt(\"continue\", 7);\n          case 7:\n            index++;\n            _context32.next = 2;\n            break;\n          case 10:\n          case \"end\":\n            return _context32.stop();\n        }\n      }\n    }, _callee28);\n  }));\n  return _resolveFetcherDeferredResults.apply(this, arguments);\n}\nfunction resolveDeferredData(_x123, _x124, _x125) {\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction _resolveDeferredData() {\n  _resolveDeferredData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee29(result, signal, unwrap) {\n    var aborted;\n    return _regeneratorRuntime().wrap(function _callee29$(_context33) {\n      while (1) {\n        switch (_context33.prev = _context33.next) {\n          case 0:\n            if (unwrap === void 0) {\n              unwrap = false;\n            }\n            _context33.next = 3;\n            return result.deferredData.resolveData(signal);\n          case 3:\n            aborted = _context33.sent;\n            if (!aborted) {\n              _context33.next = 6;\n              break;\n            }\n            return _context33.abrupt(\"return\");\n          case 6:\n            if (!unwrap) {\n              _context33.next = 14;\n              break;\n            }\n            _context33.prev = 7;\n            return _context33.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.unwrappedData\n            });\n          case 11:\n            _context33.prev = 11;\n            _context33.t0 = _context33[\"catch\"](7);\n            return _context33.abrupt(\"return\", {\n              type: ResultType.error,\n              error: _context33.t0\n            });\n          case 14:\n            return _context33.abrupt(\"return\", {\n              type: ResultType.data,\n              data: result.deferredData.data\n            });\n          case 15:\n          case \"end\":\n            return _context33.stop();\n        }\n      }\n    }, _callee29, null, [[7, 11]]);\n  }));\n  return _resolveDeferredData.apply(this, arguments);\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(function (v) {\n    return v === \"\";\n  });\n}\nfunction getTargetMatch(matches, location) {\n  var search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  var pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  var formMethod = navigation.formMethod,\n    formAction = navigation.formAction,\n    formEncType = navigation.formEncType,\n    text = navigation.text,\n    formData = navigation.formData,\n    json = navigation.json;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: undefined,\n      text: text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod: formMethod,\n      formAction: formAction,\n      formEncType: formEncType,\n      formData: undefined,\n      json: json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    var navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    var _navigation = {\n      state: \"loading\",\n      location: location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return _navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  var navigation = {\n    state: \"submitting\",\n    location: location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    var fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data: data\n    };\n    return fetcher;\n  } else {\n    var _fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data: data\n    };\n    return _fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  var fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  var fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data: data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    var sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      var _json2 = JSON.parse(sessionPositions);\n      for (var _i2 = 0, _Object$entries2 = Object.entries(_json2 || {}); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n          k = _Object$entries2$_i[0],\n          v = _Object$entries2$_i[1];\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    var _json3 = {};\n    var _iterator9 = _createForOfIteratorHelper(transitions),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _step9$value = _slicedToArray(_step9.value, 2),\n          k = _step9$value[0],\n          v = _step9$value[1];\n        _json3[k] = _toConsumableArray(v);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(_json3));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","explodeOptionalSegments","exploded","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","compilePath","matcher","compiledParams","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","AbortedDeferredError","DeferredData","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","deferredKeys","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","k","resolve","size","_ref3","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","findIndex","shouldLoadRouteOnHydration","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","unblockBlockerHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","viewTransitionOpts","flushSync","completeNavigation","_temp","isActionReload","isMutationMethod","_location$state","_isRedirect","keys","mergeLoaderData","_location$state2","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","normalizeNavigateOptions","submission","userReplace","pendingError","enableViewTransition","viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","handleNavigational404","notFoundMatches","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","type","handleAction","actionResult","shortCircuited","routeId","isErrorResult","getLoadingNavigation","handleLoaders","fetcherSubmission","updatedMatches","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverRoutes","discoverResult","boundaryId","partialMatches","actionMatch","getTargetMatch","method","callDataStrategy","results","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","getMatchesToLoad","matchesToLoad","revalidatingFetchers","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","callLoadersAndMaybeResolveData","loaderResults","fetcherResults","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","_extends","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","localManifest","patch","patchRoutesImpl","newMatches","newPartialMatches","_internalSetRoutes","newRoutes","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","nakedIndex","hasNakedIndexQuery","URLSearchParams","indexValues","getAll","append","qs","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","includeBoundary","skipActionErrorRevalidation","currentUrl","nextUrl","boundaryMatches","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","hasData","hasError","hydrate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","childrenToPatch","uniqueChildren","newRoute","existingRoute","isSameRoute","_childrenToPatch","aChild","_existingRoute$childr","bChild","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","_ref4","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","runHandler","handler","onReject","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","_result$init","_result$init2","isDeferredData","deferred","_result$init3","_result$init4","_result$init5","_result$init6","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","errorMessage","resolveData","isRevalidatingLoader","unwrap","unwrappedData","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"sources":["C:\\Users\\VISHAL\\OneDrive\\Desktop\\QuizApp\\Client\\node_modules\\@remix-run\\router\\history.ts","C:\\Users\\VISHAL\\OneDrive\\Desktop\\QuizApp\\Client\\node_modules\\@remix-run\\router\\utils.ts","C:\\Users\\VISHAL\\OneDrive\\Desktop\\QuizApp\\Client\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport type AgnosticPatchRoutesOnNavigationFunctionArgs<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = {\n  path: string;\n  matches: M[];\n  patch: (routeId: string | null, children: O[]) => void;\n};\n\nexport type AgnosticPatchRoutesOnNavigationFunction<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = (\n  opts: AgnosticPatchRoutesOnNavigationFunctionArgs<O, M>\n) => void | Promise<void>;\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  dataStrategy?: DataStrategyFunction;\n  patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      viewTransitionOpts?: ViewTransitionOpts;\n      flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches\n        .slice(0, idx + 1)\n        .every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(\n        (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n      );\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error: discoverResult.error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = { ...state.errors, ...errors };\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    abortFetcher(key);\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        preventScrollReset,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      preventScrollReset,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        abortFetcher(staleKey);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset,\n        });\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    if (!patchRoutesOnNavigationImpl) {\n      return { type: \"success\", matches };\n    }\n\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(\n              routeId,\n              children,\n              routesToUse,\n              localManifest,\n              mapRouteProperties\n            );\n          },\n        });\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search\n        ? path.search.replace(/^\\?/, \"?index&\")\n        : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string,\n  includeBoundary = false\n) {\n  let index = matches.findIndex((m) => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  initialHydration: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(state.errors)[0],\n      true\n    );\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      pendingActionResult[0]\n    );\n  }\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      initialHydration ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction shouldLoadRouteOnHydration(\n  route: AgnosticDataRouteObject,\n  loaderData: RouteData | null | undefined,\n  errors: RouteData | null | undefined\n) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  let childrenToPatch: AgnosticDataRouteObject[];\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(\n    (newRoute) =>\n      !childrenToPatch.some((existingRoute) =>\n        isSameRoute(newRoute, existingRoute)\n      )\n  );\n\n  let newRoutes = convertRoutesToDataRoutes(\n    uniqueChildren,\n    mapRouteProperties,\n    [routeId || \"_\", \"patch\", String(childrenToPatch?.length || \"0\")],\n    manifest\n  );\n\n  childrenToPatch.push(...newRoutes);\n}\n\nfunction isSameRoute(\n  newRoute: AgnosticRouteObject,\n  existingRoute: AgnosticRouteObject\n): boolean {\n  // Most optimal check is by id\n  if (\n    \"id\" in newRoute &&\n    \"id\" in existingRoute &&\n    newRoute.id === existingRoute.id\n  ) {\n    return true;\n  }\n\n  // Second is by pathing differences\n  if (\n    !(\n      newRoute.index === existingRoute.index &&\n      newRoute.path === existingRoute.path &&\n      newRoute.caseSensitive === existingRoute.caseSensitive\n    )\n  ) {\n    return false;\n  }\n\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if (\n    (!newRoute.children || newRoute.children.length === 0) &&\n    (!existingRoute.children || existingRoute.children.length === 0)\n  ) {\n    return true;\n  }\n\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children!.every((aChild, i) =>\n    existingRoute.children?.some((bChild) => isSameRoute(aChild, bChild))\n  );\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}