{"ast":null,"code":"import _slicedToArray from\"C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from'react';import Questions from'./Questions';import{MoveNextQuestion,MovePrevQuestion}from'../hooks/FetchQuestion';import{PushAnswer}from'../hooks/setResult';/** redux store import */import{useSelector,useDispatch}from'react-redux';import{Navigate}from'react-router-dom';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Quiz(){var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),check=_useState2[0],setChecked=_useState2[1];var result=useSelector(function(state){return state.result.result;});var _useSelector=useSelector(function(state){return state.questions;}),queue=_useSelector.queue,trace=_useSelector.trace;var dispatch=useDispatch();/** next button event handler */function onNext(){if(trace<queue.length){/** increase the trace value by one using MoveNextAction */dispatch(MoveNextQuestion());/** insert a new result in the array.  */if(result.length<=trace){dispatch(PushAnswer(check));}}/** reset the value of the checked variable */setChecked(undefined);}/** Prev button event handler */function onPrev(){if(trace>0){/** decrease the trace value by one using MovePrevQuestion */dispatch(MovePrevQuestion());}}function onChecked(check){setChecked(check);}/** finished exam after the last question */if(result.length&&result.length>=queue.length){return/*#__PURE__*/_jsx(Navigate,{to:'/result',replace:true});}return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title text-light\",children:\"Quiz Application\"}),/*#__PURE__*/_jsx(Questions,{onChecked:onChecked}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid\",children:[trace>0?/*#__PURE__*/_jsx(\"button\",{className:\"btn prev\",onClick:onPrev,children:\"Prev\"}):/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"button\",{className:\"btn next\",onClick:onNext,children:\"Next\"})]})]});}","map":{"version":3,"names":["React","useEffect","useState","Questions","MoveNextQuestion","MovePrevQuestion","PushAnswer","useSelector","useDispatch","Navigate","Quiz","undefined","check","setChecked","result","state","questions","queue","trace","dispatch","onNext","length","onPrev","onChecked"],"sources":["C:/Users/VISHAL/OneDrive/Desktop/QuizApp/Client/src/components/Quiz.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Questions from './Questions'\n\nimport { MoveNextQuestion, MovePrevQuestion } from '../hooks/FetchQuestion';\nimport { PushAnswer } from '../hooks/setResult';\n\n/** redux store import */\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\n\nexport default function Quiz() {\n\n    const [check, setChecked] = useState(undefined)\n\n    const result = useSelector(state => state.result.result);\n    const { queue, trace } = useSelector(state => state.questions);\n    const dispatch = useDispatch()\n\n    /** next button event handler */\n    function onNext(){\n        if(trace < queue.length){\n            /** increase the trace value by one using MoveNextAction */\n            dispatch(MoveNextQuestion());\n\n            /** insert a new result in the array.  */\n            if(result.length <= trace){\n                dispatch(PushAnswer(check))\n            }\n        }\n     \n        /** reset the value of the checked variable */\n        setChecked(undefined)\n    }\n\n    /** Prev button event handler */\n    function onPrev(){\n        if(trace > 0){\n            /** decrease the trace value by one using MovePrevQuestion */\n            dispatch(MovePrevQuestion());\n        }\n    }\n\n    function onChecked(check){\n        setChecked(check)\n    }\n\n    /** finished exam after the last question */\n    if(result.length && result.length >= queue.length){\n        return <Navigate to={'/result'} replace={true}></Navigate>\n    }\n\n  return (\n    <div className='container'>\n        <h1 className='title text-light'>Quiz Application</h1>\n\n        {/* display questions */}\n        <Questions onChecked={onChecked} />\n\n        <div className='grid'>\n            { trace > 0 ? <button className='btn prev' onClick={onPrev}>Prev</button> : <div></div>}\n            <button className='btn next' onClick={onNext}>Next</button>\n        </div>\n    </div>\n  )\n}\n"],"mappings":"qIAAA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAOC,UAAS,KAAM,aAAa,CAEnC,OAASC,gBAAgB,CAAEC,gBAAgB,KAAQ,wBAAwB,CAC3E,OAASC,UAAU,KAAQ,oBAAoB,CAE/C,yBACA,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,QAAQ,KAAQ,kBAAkB,yFAE3C,cAAe,SAASC,KAAI,EAAG,CAE3B,cAA4BR,QAAQ,CAACS,SAAS,CAAC,wCAAxCC,KAAK,eAAEC,UAAU,eAExB,GAAMC,OAAM,CAAGP,WAAW,CAAC,SAAAQ,KAAK,QAAIA,MAAK,CAACD,MAAM,CAACA,MAAM,GAAC,CACxD,iBAAyBP,WAAW,CAAC,SAAAQ,KAAK,QAAIA,MAAK,CAACC,SAAS,GAAC,CAAtDC,KAAK,cAALA,KAAK,CAAEC,KAAK,cAALA,KAAK,CACpB,GAAMC,SAAQ,CAAGX,WAAW,EAAE,CAE9B,gCACA,QAASY,OAAM,EAAE,CACb,GAAGF,KAAK,CAAGD,KAAK,CAACI,MAAM,CAAC,CACpB,2DACAF,QAAQ,CAACf,gBAAgB,EAAE,CAAC,CAE5B,yCACA,GAAGU,MAAM,CAACO,MAAM,EAAIH,KAAK,CAAC,CACtBC,QAAQ,CAACb,UAAU,CAACM,KAAK,CAAC,CAAC,CAC/B,CACJ,CAEA,8CACAC,UAAU,CAACF,SAAS,CAAC,CACzB,CAEA,gCACA,QAASW,OAAM,EAAE,CACb,GAAGJ,KAAK,CAAG,CAAC,CAAC,CACT,6DACAC,QAAQ,CAACd,gBAAgB,EAAE,CAAC,CAChC,CACJ,CAEA,QAASkB,UAAS,CAACX,KAAK,CAAC,CACrBC,UAAU,CAACD,KAAK,CAAC,CACrB,CAEA,4CACA,GAAGE,MAAM,CAACO,MAAM,EAAIP,MAAM,CAACO,MAAM,EAAIJ,KAAK,CAACI,MAAM,CAAC,CAC9C,mBAAO,KAAC,QAAQ,EAAC,EAAE,CAAE,SAAU,CAAC,OAAO,CAAE,IAAK,EAAY,CAC9D,CAEF,mBACE,aAAK,SAAS,CAAC,WAAW,wBACtB,WAAI,SAAS,CAAC,kBAAkB,8BAAsB,cAGtD,KAAC,SAAS,EAAC,SAAS,CAAEE,SAAU,EAAG,cAEnC,aAAK,SAAS,CAAC,MAAM,WACfL,KAAK,CAAG,CAAC,cAAG,eAAQ,SAAS,CAAC,UAAU,CAAC,OAAO,CAAEI,MAAO,kBAAc,cAAG,cAAW,cACvF,eAAQ,SAAS,CAAC,UAAU,CAAC,OAAO,CAAEF,MAAO,kBAAc,GACzD,GACJ,CAEV"},"metadata":{},"sourceType":"module"}